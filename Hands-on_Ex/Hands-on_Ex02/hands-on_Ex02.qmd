---
title: "Beyond ggplot2 Fundamentals"
author: "Vanessa Riadi"
date: "April 22, 2025"
date-modified: "last-modified"
format:
  html:
    toc: true
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

## [2.1]{style="color:#d496d4; background:none;"} Overview

In this chapter, we learn several **ggplot2 extensions** for creating more elegant and effective statistical graphics that allow us to:

-   Control the placement of annotation on a graph by using functions provided in **ggrepel** package,
-   Create professional publication quality figure by using functions provided in **ggthemes** and **hrbrthemes** packages,
-   Plot composite figure by combining ggplot2 graphs by using **patchwork** package.

## [2.2]{style="color:#d496d4; background:none;"} Getting started

### [2.2.1]{style="color:#d496d4; background:none;"} Installing and loading the required libraries

In this exercise, beside **tidyverse**, these four R packages will be used:

1.  **ggrepel:** a R package provides geoms for ggplot2 to repel overlapping text labels.
2.  **ggthemes:** a R package provides some extra themes, geoms, and scales for ggplot.
3.  **hrbrthemes**: a R package provides typographu-centric themes and theme components for ggplot2.
4.  **patchwork:** a R package for preparing composite figure created using ggplot2.

Code chunk below will be used to check if these packages have been installed and also load them onto your working R environment.

::: {style="font-size: 1.4em"}
```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse) 
```
:::

### [2.2.2]{style="color:#d496d4; background:none;"} Importing data

For the purpose of this exercise, a data file called *Exam_data* will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.

The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package. **readr** is one of the tidyverse package.

::: {style="font-size: 1.4em"}
```{r}
exam_data <- read_csv("data/Exam_data.csv")
```
:::

There are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.
-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

![](images/ss1.jpg){width="444"}

## [2.3]{style="color:#d496d4; background:none;"} Beyond ggplot2 Annotation: ggrepel

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

::: panel-tabset
## ðŸŽ€ [PRACTICE]{style="color:#d496d4"}

```{r}
#| eval: false
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm,
              linewidth=0.5) +
  geom_label(aes(label = ID,
                 colour = GENDER), #added colours
             hjust = .5,
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

```{r}
#| echo: false
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm,
              linewidth=0.5) +
  geom_label(aes(label = ID,
                 colour = GENDER), #added colours
             hjust = .5,
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## The plot & code

```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

[**ggrepel**](https://ggrepel.slowkow.com/index.html) is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text as in our examples on the right.

We simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

### [2.3.1]{style="color:#d496d4; background:none;"} Working with ggrepel

::: panel-tabset
## ðŸŽ€ [PRACTICE]{style="color:#d496d4"}

Applied colours to differentiate genders.

```{r}
#| eval: false
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              size = 0.5) +
  geom_label_repel(aes(label = ID,
                       colour = GENDER), #colour for gender
                   fontface = "bold") +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  ggtitle("English scores vs Maths scores for P3")
```

```{r}
#| echo: false
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              size = 0.5) +
  geom_label_repel(aes(label = ID,
                       colour = GENDER), #colour for gender
                   fontface = "bold") +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  ggtitle("English scores vs Maths scores for P3")
```

## The plot & code

```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

## [2.4]{style="color:#d496d4; background:none;"} Beyond ggplot2 Themes

ggplot2 comes with eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html), they are: `theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void()`.

#### ðŸŽ€ [Let's explore the different ggplot2 themes]{style="color:#d496d4"}

::: panel-tabset
## light

`theme_light()` and different colors for fill and color.

```{r}
#| eval: false
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey90",
                 fill = "pink3") +
  theme_light() +
  ggtitle("Distribution of Maths scores")
```

```{r}
#| echo: false
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey90",
                 fill = "pink3") +
  theme_light() +
  ggtitle("Distribution of Maths scores")
```

## dark

```{r}
#| eval: false
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey90",
                 fill = "pink3") +
  theme_dark() +
  ggtitle("Distribution of Maths scores")
```

```{r}
#| echo: false
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey90",
                 fill = "pink3") +
  theme_dark() +
  ggtitle("Distribution of Maths scores")
```

## gray

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +  
  ggtitle("Distribution of Maths scores") 
```

## bw

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_bw() +
  ggtitle("Distribution of Maths scores") 
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_bw() +  
  ggtitle("Distribution of Maths scores") 
```

## linedraw

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_linedraw() +
  ggtitle("Distribution of Maths scores") 
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_linedraw() +  
  ggtitle("Distribution of Maths scores") 
```

## classic

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_classic() +
  ggtitle("Distribution of Maths scores") 
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_classic() +  
  ggtitle("Distribution of Maths scores") 
```

## minimal

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_minimal() +
  ggtitle("Distribution of Maths scores") 
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_minimal() +  
  ggtitle("Distribution of Maths scores") 
```

## void

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_void() +
  ggtitle("Distribution of Maths scores") 
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_void() +  
  ggtitle("Distribution of Maths scores") 
```
:::

Refer to this [link](https://ggplot2.tidyverse.org/reference/index.html#themes) to learn more about ggplot2 `Themes`

### [2.4.1]{style="color:#d496d4; background:none;"} Working with ggtheme package

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/index.html) provides ['ggplot2' themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), 'Stata', 'Excel', and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

#### ðŸŽ€ [Let's explore some of the ggthemes]{style="color:#d496d4"}
::: panel-tabset
## Wall Street Journal

```{r}
#| eval: false
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90",
                 linewidth = 0.3) +
  ggtitle("Distribution of Maths scores") +
  theme_wsj()
```

```{r}
#| echo: false
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90",
                 linewidth = 0.3) +
  ggtitle("Distribution of Maths scores") +
  theme_wsj()
```

## The Economist

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

## Stata graph

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_stata()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_stata()
```

## Solarized

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_solarized()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_solarized()
```
:::

### [2.4.2]{style="color:#d496d4; background:none;"} Working with hrbthems package

[**hrbrthemes**](https://cran.r-project.org/web/packages/hrbrthemes/index.html) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

#### ðŸŽ€ [Let's explore some of the hrbrthemes]{style="color:#d496d4"}
::: panel-tabset
## ipsum

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

## ft_rc

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ft_rc()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ft_rc()
```

## modern_rc

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_modern_rc()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_modern_rc()
```

## ipsum_rc

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum_rc()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum_rc()
```
:::

The second goal centers around productivity for a production workflow. In fact, this "production workflow" is the context for where the elements of hrbrthemes should be used. Read more [here](https://hrbrmstr.github.io/hrbrthemes/articles/why_hrbrthemes.html) to learn more.

#### ðŸŽ€ [Let's explore the different arguments]{style="color:#d496d4"}

::: panel-tabset
## grid

-   No grid `theme_ipsum(grid = "")`
-   Horizontal grid `theme_ipsum(grid = "Y")`
-   Vertical grid `theme_ipsum(grid = "X")`
-   Both axes grid `theme_ipsum(grid = "XY")`

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18, 
              base_size = 15, 
              grid = "XY") 
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18, 
              base_size = 15, 
              grid = "XY") 
```

## base_family

Default base_family for `theme_ipsum` is "Arial Narrow"

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(
  base_family = "Comic Sans MS",
  grid = ""
)
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(
  base_family = "Comic Sans MS",
  grid = ""
)
```

## sizes & face

You can use this to showcase layout and font hierarchy.

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores",
  subtitle = "Based on Primary 3 year-end exam results") +
labs(caption = "Source: exam_data.csv") +
theme_ipsum(
  base_family = "Times New Roman",
  plot_title_size = 20,
  subtitle_size = 14,
  caption_size = 12,
  plot_title_face = "bold",
  caption_face = "italic"
)
```

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores",
  subtitle = "Based on Primary 3 year-end exam results") +
labs(caption = "Source: exam_data.csv") +
theme_ipsum(
  base_family = "Times New Roman",
  plot_title_size = 20,
  subtitle_size = 14,
  caption_size = 12,
  plot_title_face = "bold",
  caption_face = "italic"
)
```
:::

::: callout-tip
### More information on hrbrmstr packages and themes

For more information on hrbrmstr package and themes [click here](https://hrbrmstr.github.io/hrbrthemes/reference/index.html)

You can go to each theme and find the list of arguments you can use to customise the theme\
(e.g. list of arguments for `theme_ipsum())` can be found [here](https://hrbrmstr.github.io/hrbrthemes/reference/theme_ipsum.html)
:::

## [2.5]{style="color:#d496d4; background:none;"} Beyond Single Graph

It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. 

:::: panel-tabset

## p1
First, let us create three statistical graphics by using the code chunk below.
```{r}
#| eval: false
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```

```{r}
#| echo: false
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
p1
```

## p2
Next
```{r}
#| eval: false
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")
```

```{r}
#| echo: false
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")
p2
```

## p3
Lastly, we will draw a scatterplot for English score versus Maths score by as shown below

```{r}
#| eval: false
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
p3
```

```{r}
#| echo: false
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
p3
```

::::

### ðŸŽ€ [PRACTICE]{style="color:#d496d4"}
If you want to auto-wrap your title to fit within n numbers characters per line you can use `stringr::str_wrap()` from `stringr` library
```{r}
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle(stringr::str_wrap("English scores versus Maths scores for Primary 3", width = 30)) +
  theme_wsj() +
  theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"))

p3

```


### [2.5.1]{style="color:#d496d4; background:none;"} Creating Composite Graphics: pathwork methods

There are several ggplot2 extension's functions support the needs to prepare composite figure by combining several graphs such as [`grid.arrange()`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [`plot_grid()`](https://wilkelab.org/cowplot/reference/plot_grid.html) of [**cowplot**](https://wilkelab.org/cowplot/index.html) package. In this section, I am going to shared with you an ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/index.html) which is specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax where we can create layouts super easily. Here's the general syntax that combines:

-   Two-Column Layout using the Plus Sign +.
-   Parenthesis () to create a subplot group.
-   Two-Row Layout using the Division Sign `/`

### [2.5.2]{style="color:#d496d4; background:none;"} Combining two ggplot2 graphs

Figure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!

:::: panel-tabset
## ðŸŽ€ [PRACTICE]{style="color:#d496d4"}
```{r}
#| eval: false
p2 + p3
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 6
p2 + p3
```

## The plot & code

```{r}
#| eval: false
p1 + p2
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 6
p1 + p2
```

::::

### [2.5.3]{style="color:#d496d4; background:none;"} Combining three ggplot2 graphs

We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:

-   "/" operator to stack two ggplot2 graphs,
-   "\|" operator to place the plots beside each other,
-   "()" operator the define the sequence of the plotting.

:::: panel-tabset

## ðŸŽ€ [PRACTICE]{style="color:#d496d4"}
```{r}
#| eval: false
patchwork <- p3 | ( p2 / p1)
```
       
```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 6
p3 | ( p2 / p1)
```

## The plot & code
```{r}
#| eval: false
(p1 / p2) | p3
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 8
(p1 / p2) | p3
```

::::

To learn more about, refer to [Plot Assembly](https://patchwork.data-imaginist.com/articles/guides/assembly.html).

### [2.5.4]{style="color:#d496d4; background:none;"} Creating a composite figure with tag

In order to identify subplots in text, **patchwork** also provides auto-tagging capabilities as shown in the figure below.

:::: panel-tabset

## ðŸŽ€ [PRACTICE]{style="color:#d496d4"}
```{r}
#| eval: false
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'A')
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 7
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'A')
```

## The plot & code
```{r}
#| eval: false
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 7
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

::::

### [2.5.5]{style="color:#d496d4; background:none;"} Creating figure with insert

Beside providing functions to place plots next to each other based on the provided layout. With [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots or graphic elements freely on top or below another plot.

:::: panel-tabset

## ðŸŽ€ [PRACTICE]{style="color:#d496d4"}
```{r}
#| eval: false
p3 + inset_element(p2, 
                   left = 0.3, 
                   bottom = 0, 
                   right = 1, 
                   top = 0.6)
```

```{r}
#| echo: false
p3 + inset_element(p2, 
                   left = 0.3, 
                   bottom = 0, 
                   right = 1, 
                   top = 0.6)
```

## The plot & code
```{r}
#| eval: false
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

```{r}
#| echo: false
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

::::

### [2.5.6]{style="color:#d496d4; background:none;"} Creating a composite figure by using patchwork and ggtheme

Let's practice creating figures by combining patchwork and ggthemes packages.

#### ðŸŽ€ [PRACTICE]{style="color:#d496d4"}

:::: panel-tabset
## layout 1 & theme_economist
```{r}
#| eval: false
patchwork <- p3 | (p2 / p1)
patchwork & theme_economist() +
  theme(axis.title = element_text(size = rel(1)),
        axis.text = element_text(size = 8))
```
       
```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 6
patchwork <- p3 | (p2 / p1)
patchwork & theme_economist() +
  theme(axis.title = element_text(size = rel(1)),
        axis.text = element_text(size = 8))
```

## layout 2 & theme_wsj
```{r}
#| eval: false
patchwork <- (p1 | p2) / p3
patchwork & theme_wsj() +
  theme(plot.title =  element_text(hjust = 0.5, size = 15, face = "bold"))
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 7
patchwork <- (p1 | p2) / p3
patchwork & theme_wsj() +
  theme(plot.title =  element_text(hjust = 0.5, size = 15, face = "bold"))
```

::::

## [2.6]{style="color:#d496d4; background:none;"} Reference

-   [Patchwork R package goes nerd viral](https://www.littlemissdata.com/blog/patchwork)
-   [ggrepel](https://ggrepel.slowkow.com/index.html)
-   [ggthemes](https://ggplot2.tidyverse.org/reference/ggtheme.html)
-   [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/)
-   [ggplot tips: Arranging plots](https://albert-rapp.de/post/2021-10-28-extend-plot-variety/)
-   [ggplot2 Theme Elements Demonstration](https://henrywang.nl/ggplot2-theme-elements-demonstration/)
-   [ggplot2 Theme Elements Reference Sheet](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)
