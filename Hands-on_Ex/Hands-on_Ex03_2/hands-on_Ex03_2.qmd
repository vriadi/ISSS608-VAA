---
title: "Programming Animated Statistical Graphics with R"
author: "Vanessa Riadi"
date: "April 28, 2025"
date-modified: "last-modified"
format:
  html:
    toc: true
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

## [3.2.1]{style="color:#d496d4; background:none;"} Overview

When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using **gganimate** and **plotly r** packages. At the same time, you will also learn how to (i) reshape data by using **tidyr** package, and (ii) process, wrangle and transform data by using **dplyr** package.

### [3.2.1.1]{style="color:#d496d4; background:none;"} Basic concepts of animation

When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.

![](images/image1.jpg)

### [3.2.1.2]{style="color:#d496d4; background:none;"} Terminology

Before we dive into the steps for creating an animated statistical graph, it's important to understand some of the key concepts and terminology related to this type of visualization.

1.  **Frame**: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.

2.  **Animation Attributes**: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.

::: callout-tip
Before you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.
:::

## [3.2.2]{style="color:#d496d4; background:none;"} Getting Started

### [3.2.2.1]{style="color:#d496d4; background:none;"} Loading the R packages

First, write a code chunk to check, install and load the following R packages:

-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.
-   [**gganimate**](https://gganimate.com/), an ggplot extension for creating animated statistical graphs.
-   [**gifski**](https://cran.r-project.org/web/packages/gifski/index.html) converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.
-   [**gapminder**](https://cran.r-project.org/web/packages/gapminder/index.html): An excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.
-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

![](images/spongeR_tidyverse.jpg){fig-align="center" width="447"}

::: callout-note
# Load the Packages

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```
:::

### [3.2.2.2]{style="color:#d496d4; background:none;"} Importing the data

In this hands-on exercise, the *Data* worksheet from *GlobalPopulation* Excel workbook will be used.

Write a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.

::: panel-tabset
## mutate_at()

Using [`mutate_at()`]() as shown in the code chunk below.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("../data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```

## across()

Instead of using `mutate_at()`, [`across()`](https://dplyr.tidyverse.org/reference/across.html) can be used to derive the same outputs.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("../data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```

## Deprecated

Unfortunately, `mutate_each_()` was deprecated in dplyr 0.7.0. and `funs()` was deprecated in dplyr 0.8.0.

```{r}
#| eval: false
col <- c("Country", "Continent")
globalPop <- read_xls("../data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```
:::

::: callout-note
### Things to learn from the code chunk above

-   [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) of **readxl** package is used to import the Excel worksheet.
-   `mutate_each_()` of dplyr package is used to convert all character data type into factor.
-   `mutate` of dplyr package is used to convert data values of Year field into integer.
:::

## [3.2.3]{style="color:#d496d4; background:none;"} Animated Data Visualisation: gganimate methods

[**gganimate**](https://gganimate.com/index.html) extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.
-   `view_*()` defines how the positional scales should change along the animation.
-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.
-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.
-   `ease_aes()` defines how different aesthetics should be eased during transitions.

### [3.2.3.1]{style="color:#d496d4; background:none;"} Building a static population bubble plot

In the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

### [3.2.3.2]{style="color:#d496d4; background:none;"} Building the animated bubble plot

In the code chunk below,

-   [`transition_time()`](https://gganimate.com/reference/transition_time.html) of **gganimate** is used to create transition through distinct states in time (i.e. Year).
-   [`ease_aes()`](https://gganimate.com/reference/ease_aes.html) is used to control easing of aesthetics. The default is `linear`. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

#### The plot & code

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')          
```

#### ðŸŽ€ Practice {style="color:#d496d4"}

[`ease_aes()`](https://gganimate.com/reference/ease_aes.html) require modifiers for non `linear`. Let's try some of the fun ones!

::: panel-tabset
## elastic-out

With values and color by continent

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Continent)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = continent_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('elastic-out') 
```

## back-in-out

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('back-in-out') 
```
:::

## [3.2.4]{style="color:#d496d4; background:none;"} Animated Data Visualisation: plotly

In **Plotly R** package, both `ggplotly()` and `plot_ly()` support key frame animations through the `frame` argument/aesthetic. They also support an `ids` argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).

### [3.2.4.1]{style="color:#d496d4; background:none;"} Building an animated bubble plot: `ggplotly()` method

In this sub-section, you will learn how to create an animated bubble plot by using `ggplotly()` method.

:::: panel-tabset
## The plot

```{r}
#| echo: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)
```

The animated bubble plot above includes a play/pause button and a slider component for controlling the animation

## The code chunk

```{r}
#| eval: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)
```

::: callout-note
### Things to learn from the code chunk above

-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called *gg*.
-   `ggplotly()` is then used to convert the R graphic object into an animated svg object.
:::
::::

Notice that although `show.legend = FALSE` argument was used, the legend still appears on the plot. To overcome this problem, `theme(legend.position='none')` should be used as shown in the plot and code chunk below.

::: panel-tabset
## The plot

```{r}
#| echo: false
#| fig-height: 6
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```

## The code chunk

```{r}
#| eval: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```
:::

### [3.2.4.2]{style="color:#d496d4; background:none;"} Building an animated bubble plot: `plot_ly()` method

In this sub-section, you will learn how to create an animated bubble plot by using `plot_ly()` method.

::: panel-tabset
## ðŸŽ€ [PRACTICE]{style="color:#d496d4"}

I saw [this video](https://youtu.be/y5gsHP5rpvI) about Plotly on Youtube, and I want to try!

```{r}
#| fig-height: 6
#| fig-width: 6
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent, 
          marker=list(sizemode="diameter"),
          frame = ~Year, 
          text = ~paste("Country: ", Country, 
                        "<br>",
                        "Continent:", Continent, 
                        "<br>",
                        "Population:", Population), 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(title="Animated Plotly Bubble Plot", margin = list(t = 50))
bp
```

## The plot

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent, 
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```

## The code chunk

```{r}
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```
:::

## [3.2.5]{style="color:#d496d4; background:none;"} Reference

-   [Getting Started](https://gganimate.com/articles/gganimate.html)
-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.
-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).
-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)
