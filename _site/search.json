[
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "Superstore Sales and Profit Report",
    "section": "",
    "text": "View on",
    "crumbs": [
      "In-Class Excercise",
      "2 - Superstore Sales and Profit Report"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.",
    "crumbs": [
      "Take-Home Exercise",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-the-data",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "4.1 Load the Data",
    "text": "4.1 Load the Data\nFirst we load the data.\n\ndemographic_data &lt;- read_csv(\"data/respopagesexfa2024.csv\")",
    "crumbs": [
      "Take-Home Exercise",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-the-data",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "4.2 Check the Data",
    "text": "4.2 Check the Data\n\n\n\n\n\n\nFrom the first glance, we notice that there are ‘0’ Pop in the dataset. For this exercise, we will be focusing on the top-level visualization per Planning Areas and granular details like Population per Subzone and Floor Area aren’t necessary. We should exclude those rows with zero population values at the Planning Area level. This will help clean up the data and make the visualizations clearer by removing unnecessary zeros. We will do it in Chapter 4.3\n\n\n\n\n\n\nDid you know?\n\n\n\nThere are more R packages that can help you to view or describe data. E.g. Hmisc, psych, qreport package. I will be using qreport here\nIf you have yet to install qreport, install it by typing below in the Console:\n\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\ninstall.packages(\"qreport\")\n\n\n\nHere I am using qreportpackage’s dataOverview that I already pre-load earlier.\n\ndataOverview(demographic_data, plot = c(\"none\"),)\n\ndemographic_data has 75696 observations (75696 complete) and 7 variables (7 complete)\n\n\n|Variable |Type       | Distinct|  Info| Symmetry| NAs|Rarest Value            | Frequency of Rarest Value|Mode        | Frequency of Mode|\n|:--------|:----------|--------:|-----:|--------:|---:|:-----------------------|-------------------------:|:-----------|-----------------:|\n|PA       |Nonnumeric |       55| 0.999|    0.991|   0|Central Water Catchment |                       228|Bukit Merah |              3876|\n|SZ       |Nonnumeric |      332| 1.000|    1.000|   0|Admiralty               |                       228|Admiralty   |               228|\n|AG       |Discrete   |       19| 0.997|    1.000|   0|0_to_4                  |                      3984|0_to_4      |              3984|\n|Sex      |Discrete   |        2| 0.750|    1.000|   0|Females                 |                     37848|Females     |             37848|\n|FA       |Discrete   |        6| 0.972|    1.000|   0|&lt;= 60                   |                     12616|&lt;= 60       |             12616|\n|Pop      |Continuous |      183| 0.831|    6.953|   0|1260                    |                         1|0           |             41742|\n|Time     |Discrete   |        1| 0.000|    1.000|   0|2024                    |                     75696|2024        |             75696|\n\n\nLet’s also count what’s the total Pop\n\ncntpop &lt;- demographic_data %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) \ncat(cntpop$Pop)\n\n4187720\n\n\n\nObservation\n\nThe data shows Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex as of June 2024 with total population of 4,187,720.\nWe observe that there are 75,696 rows and 7 columns. No missing values are observed. Refer to the column legend in Appendix A\nThere are a total of seven attributes. 5 of them are categorical data type and the other three are in numerical data type.\n\nThe categorical attributes are: PA, SZ, AG, Sex, FA.\nThe numerical attributes are: Pop, Time.\n\nWe can also observe how many distinct values for each Variable. This will help us think what to use for our visualization.",
    "crumbs": [
      "Take-Home Exercise",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dataprep",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dataprep",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "4.3 Data Preparation",
    "text": "4.3 Data Preparation\n\n4.3.1 Cleaning Data\nAs mentioned earlier, we will be focusing on the top-level visualization per Planning Areas and granular details like Population per Subzone and Floor Area aren’t necessary. Here we will exclude those rows with zero population values at the Planning Area level by using filter.\n\nCleaned DataCode\n\n\n\n\n\n\n\n\n\n\nClean using filter and display as data table\n\ndemographic_data_clean &lt;- demographic_data %&gt;%\n  filter(Pop &gt; 0)\n\nDT::datatable(demographic_data_clean , options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20)))\n\n\n\n\n\n\n4.3.2 Age Group recoding\nWe will be recoding the Age Group to three groups for clearer visualization: Below 20 years, 20-64 Years, 65 years & Over following National Statistical Standards Recommendations on Definition and Classification of Age (More details in Appendix B ).\n\nDataCode\n\n\n\n\n\n\n\n\n\n\n\ndemographic_data_recode &lt;- demographic_data_clean %&gt;%\n  mutate(\n    AG_recode = recode(\n      AG,\n      \"0_to_4\" = \"Below 20 Years\",\n      \"5_to_9\" = \"Below 20 Years\",\n      \"10_to_14\" = \"Below 20 Years\",\n      \"15_to_19\" = \"Below 20 Years\",\n      \"20_to_24\" = \"20-64 Years\",\n      \"25_to_29\" = \"20-64 Years\",\n      \"30_to_34\" = \"20-64 Years\",\n      \"35_to_39\" = \"20-64 Years\",\n      \"40_to_44\" = \"20-64 Years\",\n      \"45_to_49\" = \"20-64 Years\",\n      \"50_to_54\" = \"20-64 Years\",\n      \"55_to_59\" = \"20-64 Years\",\n      \"60_to_64\" = \"20-64 Years\",\n      \"65_to_69\" = \"65 Years and Above\",\n      \"70_to_74\" = \"65 Years and Above\",\n      \"75_to_79\" = \"65 Years and Above\",\n      \"80_to_84\" = \"65 Years and Above\",\n      \"85_to_89\" = \"65 Years and Above\",\n      \"90_and_over\" = \"65 Years and Above\"\n    )\n  )\n\nDT::datatable(demographic_data_recode , options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20)))",
    "crumbs": [
      "Take-Home Exercise",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#top-10-planning-areas-pa-ranked-by-size-of-resident-population-pop",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#top-10-planning-areas-pa-ranked-by-size-of-resident-population-pop",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "5.1 Top 10 Planning Areas (PA) Ranked by Size of Resident Population (Pop)",
    "text": "5.1 Top 10 Planning Areas (PA) Ranked by Size of Resident Population (Pop)\n\n🎀 Plot 1CodeDeepdive for more insights\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop10PA &lt;- demographic_data_clean %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  slice_max(order_by = Pop, n = 10)\n\ntop10plot &lt;- ggplot(data = top10PA, \n       aes(y = reorder(PA, Pop/1000), x = Pop/1000)) +  # reorder PA by Pop\n  geom_col(show.legend = FALSE, fill = \"pink4\") +\n  geom_text(aes(label = (Pop/1000)),\n            hjust = -0.2, color = \"black\", size = 3) +\n  ggtitle(\"Top 10 Planning Areas in 2024\\nRanked by Size of Singapore Resident Population\",\n  subtitle = paste(\"Total resident population:\", \n                 format(round(cntpop$Pop / 1000, 2), big.mark = \",\"), \n                 \"thousand\")) +\n  labs(\n    y = NULL,\n    x = \"Resident Population\\nin thousands (‘000)\",\n    caption = \"Source: singstat.gov.sg\"\n  ) +\n  theme_ipsum(base_family = \"Arial\",\n  plot_title_size = 14,\n  subtitle_size = 10,\n  caption_size = 8,\n  plot_title_face = \"bold\",\n  caption_face = \"italic\",\n  grid = \"\",\n  axis_title_face = \"bold\",\n  axis_title_size = 11) +\n  theme(axis.text.x = element_blank(),\n        axis.text.y = element_text(size=11, face=\"bold\"),\n        axis.title.x = element_text(hjust = 0.5)\n        )+\n  scale_x_continuous(expand = expansion(mult = c(0, 0.1)))\n\ntop10plot\n\n\n\n\n# Total population of the top 10 Planning Area\ncntpoptop10 &lt;- top10PA %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) \ncat(cntpoptop10$Pop)\n\n2358550\n\n\n\n# The percentage of the population of the top 10 most populous Planning Area relative to the total population.\nperc_pop_top10 &lt;- (cntpoptop10 / cntpop) * 100\ncat(perc_pop_top10$Pop)\n\n56.32062\n\n\n\n\n\n\n🎀 Insights Plot 1\n\nSlightly over half (56.3%) of the 4,187.72 thousand (~4.19 million) residents in Singapore stayed in the top 10 planning areas of residence.\nThere were five planning areas with more than 250,000 residents each, namely Tampines, Bedok, Sengkang, Jurong West, and Woodlands.\nTampines was the most populated with 284,720 residents.",
    "crumbs": [
      "Take-Home Exercise",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-group-and-sex-distribution",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-group-and-sex-distribution",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "5.3 Age Group and Sex distribution",
    "text": "5.3 Age Group and Sex distribution\n\n🎀 Plot 2CodeAlternative PlotDeepdive for more insights\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Define age group levels and labels\nAG_levels &lt;- c(\n  \"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\",\n  \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\",\n  \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\",\n  \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\"\n)\n\nAG_labels &lt;- c(\n  \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\",\n  \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65-69\", \"70-74\", \"75-79\",\n  \"80-84\", \"85-89\", \"&gt;90\"\n)\n\nAG_lookup &lt;- setNames(AG_labels, AG_levels)\n\n# Compute population shares by age group\nAGsum2 &lt;- demographic_data_clean %&gt;%\n  group_by(AG) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  mutate(\n    AG = factor(AG, levels = AG_levels),\n    Pop_share = Pop / sum(Pop),\n    cum_share = cumsum(Pop_share),\n    percentile = round(cum_share * 100, 1)\n  ) %&gt;%\n  arrange(AG)\n\n# Median and Q3 age groups\nmedian_AG &lt;- AGsum2 %&gt;% filter(cumsum(Pop) &gt;= sum(Pop) / 2) %&gt;% slice(1) %&gt;% pull(AG)\nq3_AG     &lt;- AGsum2 %&gt;% filter(cumsum(Pop) &gt;= sum(Pop) * 0.75) %&gt;% slice(1) %&gt;% pull(AG)\n\n# Convert median and Q3 to labels\nmedian_label &lt;- AG_lookup[as.character(median_AG)]\nq3_label     &lt;- AG_lookup[as.character(q3_AG)]\n\n# Prepare population pyramid data\npyramid_data &lt;- demographic_data_clean %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Population = sum(Pop, na.rm = TRUE) / 1000, .groups = \"drop\") %&gt;%\n  mutate(\n    AG = factor(AG, levels = AG_levels, labels = AG_labels, ordered = TRUE),\n    PopPercentage = ifelse(Sex == \"Females\", -Population, Population) / sum(Population) * 100,\n    PopPercentage = round(PopPercentage, 2),\n    Signal = ifelse(Sex == \"Females\", -1, 1)\n  )\n\n\n# Create the population pyramid plot\npyramid_plot &lt;- ggplot(pyramid_data, aes(x = AG, y = PopPercentage, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(y = PopPercentage + Signal * 0.5, label = abs(PopPercentage)),\n            size = 3, color = \"black\") +\n  coord_flip() +\n  scale_fill_manual(values = c(\"Females\" = \"pink2\", \"Males\" = \"steelblue\"),\n                    guide = guide_legend(override.aes = list(fill = NA))) +\n  scale_y_continuous(labels = abs) +\n  annotate(\"segment\", x = median_label, xend = median_label, y = -4, yend = 3.6,\n           color = \"red4\", linewidth = 0.7, linetype = \"dotted\") +\n  annotate(\"text\", x = median_label, y = 5, label = \"Median\",\n           color = \"red4\", size = 2.8, fontface = \"bold\") +\n  annotate(\"segment\", x = q3_label, xend = q3_label, y = -3.65, yend = 3.65,\n           color = \"red4\", linewidth = 0.7, linetype = \"dotted\") +\n  annotate(\"text\", x = q3_label, y = 5, label = \"Q3\",\n           color = \"red4\", size = 2.8, fontface = \"bold\") +\n  ggtitle(\"Population Pyramid of Singapore Residents\\nby Age and Sex 2024\",\n          subtitle = \"in percentage (%)\") +\n  labs(\n    y = \"Population (%)\",\n    x = \"Age Group\",\n    fill = \"Sex\",\n    caption = \"Source: singstat.gov.sg\"\n  ) +\n  theme_ipsum(base_family = \"Arial\",\n              plot_title_size = 14,\n              subtitle_size = 10,\n              caption_size = 8,\n              plot_title_face = \"bold\",\n              caption_face = \"italic\",\n              grid = \"Y\",\n              axis_title_face = \"bold\",\n              axis_title_size = 11,\n              axis_text_size = 8) +\n  theme(\n    strip.text = element_text(face = \"bold\"),\n    axis.title.x = element_text(hjust = 0.5),\n    axis.title.y = element_text(hjust = 0.5),\n    legend.position = \"top\",\n    legend.title = element_blank(),\n    legend.justification = c(0.45, 0),\n    legend.margin = margin(t = -20, r = 0, b = -10, l = 0, unit = \"pt\")\n  )\n\npyramid_plot\n\n\n\nAlternatively for more simpler visualisation we can also use this plot, though we can only infer Age Distribution Insights from this plot.\n\n\n\n\n\n\n\n\n\n\n\n\n# Details of the population pyramid distribution\nprint(pyramid_data, n = 38)\n\n# A tibble: 38 × 5\n   AG    Sex     Population PopPercentage Signal\n   &lt;ord&gt; &lt;chr&gt;        &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1 0-4   Females      83.4          -1.99     -1\n 2 0-4   Males        87.5           2.09      1\n 3 10-14 Females     100.           -2.4      -1\n 4 10-14 Males       104.            2.49      1\n 5 15-19 Females     104.           -2.49     -1\n 6 15-19 Males       107.            2.56      1\n 7 20-24 Females     110.           -2.64     -1\n 8 20-24 Males       115.            2.74      1\n 9 25-29 Females     135.           -3.22     -1\n10 25-29 Males       135.            3.23      1\n11 30-34 Females     166.           -3.95     -1\n12 30-34 Males       156.            3.71      1\n13 35-39 Females     166            -3.96     -1\n14 35-39 Males       149.            3.56      1\n15 40-44 Females     164.           -3.92     -1\n16 40-44 Males       147.            3.5       1\n17 45-49 Females     158.           -3.77     -1\n18 45-49 Males       144.            3.44      1\n19 50-54 Females     158.           -3.78     -1\n20 50-54 Males       149.            3.56      1\n21 55-59 Females     150.           -3.58     -1\n22 55-59 Males       145.            3.46      1\n23 5-9   Females      98.9          -2.36     -1\n24 5-9   Males       104.            2.47      1\n25 60-64 Females     150.           -3.57     -1\n26 60-64 Males       147.            3.52      1\n27 65-69 Females     136.           -3.25     -1\n28 65-69 Males       130.            3.12      1\n29 70-74 Females     107.           -2.57     -1\n30 70-74 Males        99.3           2.37      1\n31 75-79 Females      72.9          -1.74     -1\n32 75-79 Males        61.9           1.48      1\n33 80-84 Females      45.1          -1.08     -1\n34 80-84 Males        32.7           0.78      1\n35 85-89 Females      27.2          -0.65     -1\n36 85-89 Males        16.9           0.4       1\n37 &gt;90   Females      17.4          -0.42     -1\n38 &gt;90   Males         7.73          0.18      1\n\n# Details of the AG distribution\nAGsum2\n\n# A tibble: 19 × 5\n   AG             Pop Pop_share cum_share percentile\n   &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1 0_to_4      170930   0.0408     0.0408        4.1\n 2 5_to_9      202420   0.0483     0.0892        8.9\n 3 10_to_14    204610   0.0489     0.138        13.8\n 4 15_to_19    211560   0.0505     0.189        18.9\n 5 20_to_24    225020   0.0537     0.242        24.2\n 6 25_to_29    270090   0.0645     0.307        30.7\n 7 30_to_34    321010   0.0767     0.383        38.3\n 8 35_to_39    315180   0.0753     0.459        45.9\n 9 40_to_44    310700   0.0742     0.533        53.3\n10 45_to_49    301820   0.0721     0.605        60.5\n11 50_to_54    307760   0.0735     0.678        67.8\n12 55_to_59    294500   0.0703     0.749        74.9\n13 60_to_64    297020   0.0709     0.820        82  \n14 65_to_69    266580   0.0637     0.883        88.3\n15 70_to_74    206760   0.0494     0.933        93.3\n16 75_to_79    134810   0.0322     0.965        96.5\n17 80_to_84     77750   0.0186     0.983        98.3\n18 85_to_89     44050   0.0105     0.994        99.4\n19 90_and_over  25150   0.00601    1           100  \n\n\n\n\n\n\n🎀 Insights Plot 2\n\nThe median age falls within 40 to 44 age group. About 25% are aged 60 and above, with 18% aged 65 and older, highlighting aging population trend.\nChildren (0–14) account for only about 13.8% of the population, indicating low birth rates. Slightly more males than females are observed in this group.\nThe working-age population (15–64 years), as defined by the Ministry of Manpower, comprises around 68.2% of the population. This reflects a strong labour force, though future demographic challenges may arise as this group continues to age.\nThe 25-64 age group shows a near-equal gender balance.\nThe gender gap widens in the older age cohorts, with majority female in the 80+ age groups. This show that females live longer than males on average, consistent with the life expectancy at birth between the different gendersfrom 2023 report by the Singapore Department of Statistics.",
    "crumbs": [
      "Take-Home Exercise",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#association-between-age-group-distribution-and-planning-area-in-singapore",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#association-between-age-group-distribution-and-planning-area-in-singapore",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "5.3 Association Between Age Group Distribution and Planning Area in Singapore",
    "text": "5.3 Association Between Age Group Distribution and Planning Area in Singapore\n\n🎀 Plot 3Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntable_data &lt;- table(demographic_data_recode$AG_recode, demographic_data_recode$PA)\n\nchi_test &lt;- chisq.test(table_data)\n\nresiduals_df &lt;- as.data.frame(as.table(chi_test$residuals))\nggplot(residuals_df, aes(Var1, Var2, fill = Freq)) +\n     geom_tile() +\n     geom_text(aes(label = round(Freq, 2)), size = 4) +\n     scale_fill_gradient2(low = \"steelblue\", high = \"red3\", mid = \"white\", midpoint = 0) +\n     labs(x = \"AG\", y = \"PA\", fill = \"Residuals\") +\n  ggtitle(\"Association Between Age Group\\nand Planning Area in Singapore 2024\",\n         subtitle = \"Meassured using Pearson's Chi-squared test\") +\n  labs(caption = \"Source: singstat.gov.sg\")+\ntheme_ipsum(base_family = \"Arial\",\n            plot_title_size = 14,\n            subtitle_size = 10,\n            caption_size = 8,\n            plot_title_face = \"bold\",\n            caption_face = \"italic\",\n            grid = \"Y\",\n            axis_title_face = \"bold\",\n            axis_title_size = 11,\n            axis_text_size = 8) +\n  theme(\n    strip.text = element_text(face = \"bold\"),\n    axis.text.x = element_text(size=10, face=\"bold\", angle = -45, hjust = 0),\n    axis.text.y = element_text(size=10),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    legend.title = element_blank(),\n    legend.justification = c(0.45, 0),\n    legend.margin = margin(t = -20, r = 0, b = -10, l = 0, unit = \"pt\"))+\n  scale_x_discrete(expand = expansion(add = 0.5)) +\n  scale_y_discrete(expand = expansion(add = 0.5)) \n\n\n\n\n\n🎀 Insights Plot 3\n\nCentral Areas like Downtown Core are skewed toward working-age group with strong over-representation of the 20–64 group (+7.46) and lesser children (–4.03) and seniors (–6.69), reflecting its role as a Central Business District. Similar patterns appear in Newton, Museum (Bras Basah, Dhoby Ghaut, Fort Canning), and Singapore River (Boat Quay, Clarke Quay, Robertson Quay).\nNew BTO areas like Tengah and Punggol show more children and lesser seniors, indicating young families moving into new Towns / Planning Areas.\nMature Towns such as Bedok, Ang Mo Kio, and Hougang exhibit neutral residuals, suggesting stable populations with a mix of age groups and long-term residents.\nAffluent Districts such as Bukit Timah, we observe more children (+1.98) and 20-65 group (+2.99) with lesser seniors (-5.75). Proximity to “good schools” for kiasu parents likely attracts young wealthy families with its abundance of private housing. Similar trends observed in Tanglin.",
    "crumbs": [
      "Take-Home Exercise",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendixa",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendixa",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "7.1 Appendix A",
    "text": "7.1 Appendix A\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nPA\nPlanning Area\n\n\nSZ\nSubzone\n\n\nAG\nAge Group\n\n\nSex\nSex\n\n\nFA\nFloor Area of Residence\n\n\nPop\nResident Count (Population)\n\n\nTime\nTime / Period",
    "crumbs": [
      "Take-Home Exercise",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendixb",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendixb",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "7.2 Appendix B",
    "text": "7.2 Appendix B\nNational Statistical Standards Recommendations on Definition and Classification of Age\n\n\n\nAG\nAG_recode\n\n\n\n\n0_to_4\nBelow 20 years\n\n\n5_to_9\nBelow 20 years\n\n\n10_to_14\nBelow 20 years\n\n\n15_to_19\nBelow 20 years\n\n\n20_to_24\n20-64 Years\n\n\n25_to_29\n20-64 Years\n\n\n30_to_34\n20-64 Years\n\n\n35_to_39\n20-64 Years\n\n\n40_to_44\n20-64 Years\n\n\n45_to_49\n20-64 Years\n\n\n50_to_54\n20-64 Years\n\n\n55_to_59\n20-64 Years\n\n\n60_to_64\n20-64 Years\n\n\n65_to_69\n65 years & Over\n\n\n70_to_74\n65 years & Over\n\n\n75_to_79\n65 years & Over\n\n\n80_to_84\n65 years & Over\n\n\n85_to_89\n65 years & Over\n\n\n90_and_over\n65 years & Over",
    "crumbs": [
      "Take-Home Exercise",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "This website serves as a digital portfolio for my coursework in the ISSS608 Visual Analytics and Applications module. Whether you’re a fellow student, instructor, potential recruiter, or simply curious about data visualization with R, I hope you’ll find this space insightful and engaging.\nHere, you will find a collection of my work structured into three main sections:\n\nHands-on Exercises – Guided tasks completed with practical tutorials that explore key concepts and techniques in visual analytics.\nIn-class Exercises – Guided tasks completed during class sessions.\nTake-home Exercises – More in-depth assignments that demonstrate my understanding and application of visual storytelling and data design principles.\n\nAll visualizations are developed using R and RStudio, marking my first experience with the R language—an exciting learning journey and a new set of tools for exploring and communicating data stories.\n\n\n\n\n\nIf you’d like to know more about my background, experience, and qualifications, feel free to visit the About Me page.\nCheers!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, we learn the basic principles and essential components of ggplot2 through hands-on experience to plot statistical graphics based on the principle of Layered Grammar of Graphics. We will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#learning-outcome",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, we learn the basic principles and essential components of ggplot2 through hands-on experience to plot statistical graphics based on the principle of Layered Grammar of Graphics. We will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#getting-started",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Getting started",
    "text": "1.2 Getting started\n\n1.2.1 Installing and loading the required libraries\nBefore we get started, it is important for us to ensure that the required R packages have been installed.\n\n\n\n\n\n\nNote\n\n\n\nInstall pacman package by typing below in the Console:\n\n\n\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\ninstall.packages(\"pacman\")\n\n\nThe downloaded binary packages are in\n    /var/folders/4r/w93xvtdd1jnb6dwstljj2_9w0000gn/T//Rtmp4kHQad/downloaded_packages\n\n\nUse the package by typing:\n\npacman::p_load(tidyverse)\n\n\n\n1.2.2 Importing data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#introducing-ggplot",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Introducing ggplot",
    "text": "1.3 Introducing ggplot\nggplot is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication. For more detail, visit ggplot2 link.\n\n\n\n\n\n\nCheatsheet for ggplot2 (here)\n\n\n\n\n\n\n\n\n\n\n\n1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R vs ggplot plot when plotting a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n🎀 PRACTICE\nPractice plotting the different charts for English and Science.\n\n\nEnglish\n\nG graphicshistogramboxplot by Genderboxplot by Class\n\n\n\nhist(exam_data$ENGLISH)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"skyblue\") +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = GENDER,\n           y = ENGLISH)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = CLASS,\n           y = ENGLISH)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nScience\n\nG graphicshistogramboxplot by Genderboxplot by Class\n\n\n\nhist(exam_data$SCIENCE)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = SCIENCE)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"skyblue\") +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = GENDER,\n           y = SCIENCE)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = CLASS,\n           y = SCIENCE)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#grammar-of-graphics",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammar of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n::: {style=“font-size: 0.8em”} Reference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28. :::\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR colors\n\n\n\nThese are the default color Color naming for R, alternatively you can use Hex Code.",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30. Continue reading to learn how to customise this bin.\n\n\n\n\n1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n🎀 PRACTICE\n\n\n\n\n\n\nNote\n\n\n\nBy default, the underlying computation of geom_histogram through stat_bin uses 30 bins, which is not always a good default. You can set the number of bins with bins argument or modifying the width (range) of each bin with binwidth argument.\nMore info here\n\n\n\nbinbinwidth\n\n\nSet the number of bins (e.g automatically divde into 20 bins)\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 color=\"pink4\",\n                 fill=\"pink3\")\n\n\n\n\n\n\n\n\n\n\nModifying the width(range) of each bin (e.g bin to 0-20, 20-40, 40-60, 60-80 etc)\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(binwidth = 20,\n                 color=\"pink4\",\n                 fill=\"pink3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n🎀 PRACTICE\n\nggplot(data = exam_data, \n       aes(x = SCIENCE, fill = GENDER)) +\n  geom_histogram(bins = 20, color = \"grey30\") +\n  scale_fill_manual(values = c(\"Female\" = \"plum2\", \"Male\" = \"royalblue1\"))\n\n\n\n\n\n\n\n\n\n\n\n1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8 Essential Grammatical Elements in ggplot2: stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\ngeom_smooth(method = \"loess\")\n\n\nThe default smoothing method can be overridden as shown below.\n\nlmloess (default)\n\n\n‘lm’ draws a straight line\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n‘loess’ draws a very smooth curve\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=loess, #or if you input NULL or if you don't define 'method' at all, it will apply default method\n              linewidth=0.5)",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n🎀 PRACTICE\n\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size=0.8, colour=\"pink4\") +\n  facet_wrap(~ CLASS)",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out.)\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar(fill=\"pink4\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n1.10.2 Changing the y- and x-axis range\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11 Essential Grammatical Elements in ggplot2: themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n1.11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#reference",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale",
    "crumbs": [
      "Hands-On Excercise",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, we learn several ggplot2 extensions for creating more elegant and effective statistical graphics that allow us to:\n\nControl the placement of annotation on a graph by using functions provided in ggrepel package,\nCreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nPlot composite figure by combining ggplot2 graphs by using patchwork package.",
    "crumbs": [
      "Hands-On Excercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#overview",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, we learn several ggplot2 extensions for creating more elegant and effective statistical graphics that allow us to:\n\nControl the placement of annotation on a graph by using functions provided in ggrepel package,\nCreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nPlot composite figure by combining ggplot2 graphs by using patchwork package.",
    "crumbs": [
      "Hands-On Excercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#getting-started",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.2 Getting started",
    "text": "2.2 Getting started\n\n2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, these four R packages will be used:\n\nggrepel: a R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: a R package provides some extra themes, geoms, and scales for ggplot.\nhrbrthemes: a R package provides typographu-centric themes and theme components for ggplot2.\npatchwork: a R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also load them onto your working R environment.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n2.2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Excercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\n🎀 PRACTICEThe plot & code\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID,\n                 colour = GENDER), #added colours\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n2.3.1 Working with ggrepel\n\n🎀 PRACTICEThe plot & code\n\n\nApplied colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID,\n                       colour = GENDER), #colour for gender\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")",
    "crumbs": [
      "Hands-On Excercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\n🎀 Let’s explore the different ggplot2 themes\n\nlightdarkgraybwlinedrawclassicminimalvoid\n\n\ntheme_light() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"pink3\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"pink3\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_linedraw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n\n2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\n🎀 Let’s explore some of the ggthemes\n\nWall Street JournalThe EconomistStata graphSolarized\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\",\n                 linewidth = 0.3) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj() + theme (plot.title =  element_text(hjust = 0.5, size = 20, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_solarized()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n🎀 Let’s explore some of the hrbrthemes\n\nipsumft_rcmodern_rcipsum_rc\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ft_rc()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_modern_rc()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum_rc()\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Read more here to learn more.\n\n\n🎀 Let’s explore the different arguments\n\ngridbase_familysizes & face\n\n\n\nNo grid theme_ipsum(grid = \"\")\nHorizontal grid theme_ipsum(grid = \"Y\")\nVertical grid theme_ipsum(grid = \"X\")\nBoth axes grid theme_ipsum(grid = \"XY\")\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"XY\") \n\n\n\n\n\n\n\n\n\n\n\n\nDefault base_family for theme_ipsum is “Arial Narrow”\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(\n  base_family = \"Comic Sans MS\",\n  grid = \"\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\nYou can use this to showcase layout and font hierarchy.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\",\n  subtitle = \"Based on Primary 3 year-end exam results\") +\nlabs(caption = \"Source: exam_data.csv\") +\ntheme_ipsum(\n  base_family = \"Times New Roman\",\n  plot_title_size = 20,\n  subtitle_size = 14,\n  caption_size = 12,\n  plot_title_face = \"bold\",\n  caption_face = \"italic\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore information on hrbrmstr packages and themes\n\n\n\nFor more information on hrbrmstr package and themes click here\nYou can go to each theme and find the list of arguments you can use to customise the theme\n(e.g. list of arguments for theme_ipsum()) can be found here",
    "crumbs": [
      "Hands-On Excercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-single-graph",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs.\n\np1p2p3\n\n\nFirst, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\nNext\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\n\n\n\n\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🎀 PRACTICE\nIf you want to auto-wrap your title to fit within n numbers characters per line you can use stringr::str_wrap() from stringr library\n\n\n\n\n\n\nNote\n\n\n\nInstall stringr package by typing below in the Console:\n\ninstall.packages(\"stringr\")\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(stringr::str_wrap(\"English scores versus Maths scores for Primary 3\", width = 30)) +\n  theme_wsj() +\n  theme(plot.title = element_text(hjust = 0.5, size = 15, face = \"bold\"))\n\np3\n\n\n\n\n\n\n\n\n\n\n2.5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\n🎀 PRACTICEThe plot & code\n\n\n\np2 + p3\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n🎀 PRACTICEThe plot & code\n\n\n\npatchwork &lt;- p3 | ( p2 / p1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n🎀 PRACTICEThe plot & code\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n🎀 PRACTICEThe plot & code\n\n\n\np3 + inset_element(p2, \n                   left = 0.3, \n                   bottom = 0, \n                   right = 1, \n                   top = 0.6)\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nLet’s practice creating figures by combining patchwork and ggthemes packages.\n\n🎀 PRACTICE\n\nlayout 1 & theme_economistlayout 2 & theme_wsj\n\n\n\npatchwork &lt;- p3 | (p2 / p1)\npatchwork & theme_economist() +\n  theme(axis.title = element_text(size = rel(1)),\n        axis.text = element_text(size = 8))\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 | p2) / p3\npatchwork & theme_wsj() +\n  theme(plot.title =  element_text(hjust = 0.5, size = 15, face = \"bold\"))",
    "crumbs": [
      "Hands-On Excercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#reference",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.6 Reference",
    "text": "2.6 Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "Hands-On Excercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#learning-outcome",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#getting-started",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.2 Getting Started",
    "text": "3.1.2 Getting Started\nFirst, write a code to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\n\n\n\n\n\nNote\n\n\n\nInstall and launch the R packages\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#importing-data",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.3 Importing Data",
    "text": "3.1.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.1.4 Interactive Data Visualisation - ggiraph methods\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n3.1.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code to plot an interactive statistical graph by using ggiraph package. Notice that the code consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\nStep 1Step 2\n\n\nFirst, create the basic graph. We are using interactive version of ggplot2 geom (i.e. geom_dotplot_interactive())\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\ngeom_dotplot_interactive(\n  aes(tooltip = ID),\n  stackgroups = TRUE, \n  binwidth = 1, \n  method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n\n\n\n\n\n\n\nNext, enable the tooltip using girafe(). This generates an svg object to be displayed on an html page.\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  #width_svg = 6 if you enable this it will override ur fig-width above\n  #height_svg = 6*0.618 if you enable this it will override ur fig-height above\n)",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#displaying-multiple-information-on-tooltip",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.5 Displaying multiple information on tooltip",
    "text": "3.1.5 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code below.\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  #height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code create a new field called tooltip. We assign the value ID and CLASS fields into the newly created fields.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         # We assign the value ID and CLASS fields into the newly created fields. \n  \"\\n Class = \", exam_data$CLASS)) #\\n is to enter to next line\n\nThis newly created field is used as tooltip field as shown in the code of line 7.\n\n   aes(tooltip = exam_data$tooltip)\n\n\n🎀 PRACTICE\nDisplay all information in the tool-top for all subjects by adding more fields in the tooltip\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID, \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,    \n  \"\\n Race = \", exam_data$GENDER)) \n\n\nEnglishMathScience\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID, \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,    \n  \"\\n Race = \", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8\n)\n\n\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID, \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,    \n  \"\\n Race = \", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8\n)\n\n\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID, \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,    \n  \"\\n Race = \", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8\n)",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#customising-tooltip-style",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6 Customising Tooltip style",
    "text": "3.1.6 Customising Tooltip style\nCode below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\nwhitepink & sans-serif font\n\n\nBackground colour of the tooltip is white and the font colour is black and bold\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,        \n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\nBackground colour of the tooltip is pink, font colour is black and bold, font family is sans-serif\n\ntooltip_css &lt;- \"background-color:pink; #&lt;&lt;\nfont-style:bold; color:black; font-family:sans-serif\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#practice-1",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#practice-1",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.1 🎀 PRACTICE",
    "text": "3.1.6.1 🎀 PRACTICE\nWe can customise more items using the arguments from geom_dotplot_interactive() Interactive Parameters and opts_tooltip Arguments Let’s try some of them!\n\ntooltipfillopts_tooltiptooltip_css\n\n\nDefine what you want to display on hover using tooltip\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = GENDER),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p\n)\n\n\n\n\n\n\n\nColour your histodot using fill\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = GENDER),\n    fill = \"pink4\",\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p\n)\n\n\n\n\n\n\n\nChange your tooltip background using opts_tooltip\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = GENDER),\n    fill = \"pink4\",\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ng &lt;- girafe(ggobj = p)\n\ngirafe_options(g,\n  opts_tooltip(opacity = .7,\n    offx = 20, offy = -10,\n    use_fill = TRUE, use_stroke = TRUE,\n    delay_mouseout = 1000) )\n\n\n\n\n\n\n\nWe can add extra css to further customize tooltip area using css\n\ntooltip_css &lt;- \"background-color:pink; \nfont-style:bold; color:white; font-family: 'Comic Sans MS', sans-serif;\" \n#| fig-height: 3\n#| fig-width: 8\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = GENDER),\n    fill = \"pink4\",\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ng &lt;- girafe(ggobj = p)\n\ngirafe_options(g,\n  opts_tooltip(\n    css = tooltip_css,\n    opacity = .7,\n    offx = 20, offy = -10,\n    use_fill = TRUE, use_stroke = TRUE,\n    delay_mouseout = 1000) )",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#displaying-statistics-on-tooltip",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.2 Displaying statistics on tooltip",
    "text": "3.1.6.2 Displaying statistics on tooltip\nCode below shows an advanced way to customise tooltip. In this example, tooltip and stat_summary are used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point)\n\n\n\n\n\n\n🎀 PRACTICE\nUse tooltip and stat_summary to show maximum and minimum Maths score for each classes.\n\ntooltip &lt;- function(ymin, ymax, accuracy = .01) {\n  max &lt;- scales::number(ymax, accuracy = accuracy)\n  min &lt;- scales::number(ymin, accuracy = accuracy)\n  paste(\"Max maths scores:\", max, \"\\n Min maths scores:\", min)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = CLASS),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(ymax, ymin))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf no aggregation functions are supplied, will default to mean_se().",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#hover-effect-with-data_id-aesthetic",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.3 Hover effect with data_id aesthetic",
    "text": "3.1.6.3 Hover effect with data_id aesthetic\nCode below shows the second interactive feature of ggiraph, namely data_id.\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p)                                        \n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nFrom the note given, means we can edit the hover_css using the same method as girafe_options that we explored earlier in opts_tooltip. Let’s try that!\n\n\n\nhover_css &lt;- \"fill:deepskyblue;\"\n#| fig-height: 3\n#| fig-width: 8\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ng &lt;- girafe(ggobj = p)\n\ngirafe_options(g, opts_hover(css = hover_css))",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#styling-hover-effect",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.4 Styling hover effect",
    "text": "3.1.6.4 Styling hover effect\nIn the code below, css codes are used to change the highlighting effect.\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDifferent from previous example, in this example the ccs customisation request are encoded directly in options.\n\n\n\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nUsing the opts_hover above we can customize the rendering of graphic elements when user hovers over them. Let’s try other usages!\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,\n    fill = \"pink\",\n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,\n  options = list(                        \n    opts_hover(css = \"fill: red;\"),  \n    opts_hover_inv(css = \"fill:black; opacity:0.2;\") \n  )                                        \n)",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#combining-tooltip-and-hover-effect",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.5 Combining tooltip and hover effect",
    "text": "3.1.6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code below.\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,\n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,    \n  options = list(                         \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#click-effect-with-onclick",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.6 Click effect with onclick",
    "text": "3.1.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code below shown an example of onclick.\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\", as.character(exam_data$ID) )\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #&lt;&lt;\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#coordinated-multiple-views-with-ggiraph",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.1.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nWe’ve learned about patchwork before here in Hands-on Exercise 2. Hence we know that you can also do other ways to combine graphs. Let’s try it below!\n\n\n\nSide-by-sideTop and bottom\n\n\nUsing + in print(p1 + p2)\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\nUsing / in print(p1 / p2)\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )                                        \n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.1.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.1.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n3.1.7.2 Working with visual variable: plot_ly() method\nIn the code below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n3.1.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code is ggplotly().\n\n\n\n\n\n3.1.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\n\n\n\n\nNote\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)  \np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\nVisit this link to learn more about crosstalk,\n\n\n\n\n\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nWhen we hover on the subplot keyword in RStudio, we can see what attributes are available like this: \n\n\nSince the example code given above are not clear enough (doesn’t state X & Y label), we should add them in. Let’s also try other configuration to combine the plots!\n\nSide By Side SubplotsStacked SubplotsMultiple Subplots\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)  \np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\nfig &lt;- subplot(ggplotly(p1),\n        ggplotly(p2), titleX = TRUE, titleY = TRUE, margin = 0.08) %&gt;% \n  layout(title = 'Side By Side Subplots', margin = list(t = 50))\nfig\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)  \np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nfig &lt;- subplot(ggplotly(p1),\n        ggplotly(p2), nrows = 2, titleX = TRUE, titleY = TRUE, margin = 0.12) %&gt;% \n  layout(title = 'Stacked Subplots', margin = list(t = 50))\nfig\n\n\n\n2 x 2 subplot grid and populating each subplot with scatter trace.\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)  \np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np3 &lt;- ggplot(data=d, \n            aes(x = ENGLISH,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nfig &lt;- subplot(ggplotly(p1),\n        ggplotly(p2), ggplotly(p3), nrows = 2, titleX = TRUE, titleY = TRUE, margin = 0.08) %&gt;% \n  layout(title = 'Multiple Subplots', margin = list(t = 50))\nfig",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.8 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.1.8 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.1.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nMore info and arguments that we can use on Datatables. Let’s try some!\n\n\n\nPage lengthHeader colorSelect specific column\n\n\n\nDT::datatable(exam_data , options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20)\n))\n\n\n\n\n\n\n\n\nDT::datatable(exam_data, options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20),\n  initComplete = JS(\n    \"function(settings, json) {\",\n    \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n    \"}\")\n))\n\n\n\n\n\n\n\nDataTables does not provide column filters by default. Thus we can work around this by selecting the column and defining a new variable exam_data_selected\n\nexam_data_selected &lt;- exam_data %&gt;%\n  select(ID, CLASS, GENDER, ENGLISH, MATHS, SCIENCE)\n\nDT::datatable(exam_data_selected, options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20),\n  initComplete = JS(\n    \"function(settings, json) {\",\n    \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n    \"}\")\n))\n\n\n\n\n\n\n\n\n\n\n\n3.1.8.2 Linked brushing: crosstalk method\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data_selected)\np &lt;- ggplot(d, aes(ENGLISH, MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p), \n                \"plotly_selected\")\n\ncrosstalk::bscols(gg, DT::datatable(d), widths = 5)     \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#reference",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.9 Reference",
    "text": "3.1.9 Reference\n\n3.1.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\n\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.1.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Excercise",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Hands-On Excercise",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#overview",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Hands-On Excercise",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#getting-started",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.2.2 Getting Started",
    "text": "3.2.2 Getting Started\n\n3.2.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\n\n\n\n\n\n\n\n\n\n\nLoad the Packages\n\n\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\n\n3.2.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "Hands-On Excercise",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.2.3 Animated Data Visualisation: gganimate methods",
    "text": "3.2.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n3.2.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n\n3.2.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart",
    "crumbs": [
      "Hands-On Excercise",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.2.4 Animated Data Visualisation: plotly",
    "text": "3.2.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n3.2.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n3.2.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "Hands-On Excercise",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#reference",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.2.5 Reference",
    "text": "3.2.5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Excercise",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Vanessa Riadi",
    "section": "",
    "text": "I am a Project Manager, Data Analyst, and Automation Specialist with a diverse experience across the automotive, public sector (social transfers), e-commerce, and media industries. Driven, curious, and highly motivated, passionate about continuous learning and development. Excel at adapting in fast-paced environments and delivering under pressure."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Vanessa Riadi",
    "section": "Education",
    "text": "Education\nSingapore Management University | Singapore\nAug 2024 - Dec 2025\nMasters of Information Technology in Business (Data Science & Analytics)\nCurrent GPA: 3.62 / 4.0\nCoventry University | Distant Learning\nOct 2015 - Dec 2018\nBachelor of Artrs in Digital Media"
  },
  {
    "objectID": "about.html#certifications",
    "href": "about.html#certifications",
    "title": "Vanessa Riadi",
    "section": "Certifications",
    "text": "Certifications\nMassachusetts Institute of Technology | Distant Learning\nJun 2023 - Sep 2023\nData Science and Machine Learning: Making Data-Driven Decisions\nCredential ID: ZOZVYKSV"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Vanessa Riadi",
    "section": "Experience",
    "text": "Experience\nPorsche | Singapore | Feb 2025 - present\nDigital Business Development Intern\n• Partner as a business owner with external scrum team including product owner, scrum master, and developers to develop, enhance and deploy Digital Service Hub products, such as internal Sales Funnel Excellence App and Porsche E-commerce Shop.\n• Identify gaps and propose actions to drive deployment and operational excellence in “Growth Region V5” markets including Singapore, Malaysia, Thailand, Korea, Japan, Taiwan, New Zealand and Australia.\n• Design and implement Excel-based report templates for Sales Funnel tracking, enabling data-driven decision-making through contact capture analysis and conversion rate monitoring.\nThird i | Singapore | Jan 2025\nData Engineering Intern\n• 4-week Data Engineering exploration to build Third i’s data systems for batch/real-time ingestion using Google BigQuery, PostgreSQL Database Management System (DBMS) and Amazon Web Services (AWS).\nCentral Provident Fund Board (CPFB) | Singapore | Apr 2024 – Dec 2024\nManager, Business Analytics | Agency Governance & Planning Department\n• Managed automation project and worked with cross-functional teams to develop and implement automation solution using Python.\nAward: Pinnacle Award at CPFB Excellence Award 2024 (Nov 2024) for enabling quicker implementation of government transfers through the Citizen Disbursement IT System achieving a 60% e[iciency in user e[ort and vendor costs per batch User Acceptance Testing (UAT).\n• Led and conducted data asnalysis and statistical projects using Python, Excel, and Power BI with cross- functional team members to guide policy principals and improve operational e[iciency.\nNotable Project: Customer Engagement Team (CET) GovBenefit Portal study where we investigate the spike in enquiry and appeal cases which led to UI/UX overhaul of GovBenefit website (https://www.govbenefits.gov.sg/).\nLazada Singapore | Singapore | May 2022 - Jan 2024\nSenior Data Analyst, Platform Operations | Commercial Department | Oct 2023 - Jan 2024\n• Analysed and delivered business and operational data insights to cross-functional team leaders and senior stakeholders that led to improved business performance measured by a 45.29% YoY GMV increase during the 11.11 campaign in 2023.\n• Supported cross-functional stakeholders by providing ad-hoc data analysis and build data visualisation dashboards using SQL, Excel, and Power BI.\n• Performance and vendor management including setting and monitoring key performance indicator (KPIs) such as sales target (GMV and Order Coverage) for commercial team category pillars (business development and account managers).\n\nSenior Data Analyst, Lazada Livestream | Marketing Department | May 2022 - Sep 2023\n• End-to-end project management for livestream content series and mega campaign shows. Including budget-setting and allocation for multiple projects under wing, collaborating and pitching for buy-ins from stakeholders and clients, sourcing for vendors (production houses, digital agencies, independent Key Opinion Leader [KOL]), schedule planning and ensuring timely deliverables from project team including vendors and cross-functional teams (in-house designer and motion graphic artist, scriptwriter outsourced to vendor, social media posting drafts from KOL).\n• Optimized show performance and production cost using data-driven strategies, cross-functional collaboration, brand sponsorship and partnerships.\nNotable Result: Boosted ROI by improving consideration score and sales metrics by 369%, while cutting production costs by 50% compared to the previous sales-driven series. Enhanced stickability by 44.6% in average watch time using engaging mechanics for audience retention.\n• Developed dashboard using SQL and Power BI to centralize country-specific livestream data, streamlining previously scattered regional-level dashboards.\nSGAG Media | Singapore | Dec 2021 - Apr 2022\nSenior Creative Executive\n• End-to-end project and stakeholder management for experimental talent incubation.\nNight Owl Cinematics | Singapore | Jan 2020 - Dec 2021\nCrew & Livestream Tech Lead\n• Managed digital media projects and client servicing across NOC’s YouTube, Instagram, and Facebook channels. Scope includes manpower and equipment scheduling, ensuring timely delivery of deliverables, and delivering post-campaign KPI analytics.\nNotable Result: Led livestream project using data to drive campaign performance. Achieved a record- breaking CapitaStar Livestream (Dec 2021) with over 240,000 viewers, 80,000 engagements, 6x daily sales uplift for eCapitaVouchers, and over 4x daily sales uplift for eCapitaMall and Capita3Eats across 2 days campaign.\nFirefly Photography | Singapore | Nov 2018 - Dec 2019\nContent Creator & Videographer/Editor\n• End-to-end project management and client servicing for corporate, event, and wedding, including notable projects such as NDP 2019 sponsorship with MINDEF on “NDP 2019 The Exchange Series”."
  },
  {
    "objectID": "about.html#skills",
    "href": "about.html#skills",
    "title": "Vanessa Riadi",
    "section": "Skills",
    "text": "Skills\nSoft Skills\nDesign Thinking, Analytical & Critical Thinking, Project Management, Stakeholder & Client Management, Problem Solving, Decision Making, Adaptability, Multitasking.\nTechnical Skills\nSQL, Python, Microsoft Excel, Tableau, Power BI, SAS.\nLanguages\nEnglish, Bahasa Indonesia, Mandarin"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "Superstore Sales vs Profit by States Quadrant",
    "section": "",
    "text": "View on",
    "crumbs": [
      "In-Class Excercise",
      "3 - Superstore Sales vs Profit by States Quadrant"
    ]
  }
]