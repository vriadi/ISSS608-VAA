[
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "Superstore Sales and Profit Report",
    "section": "",
    "text": "View on",
    "crumbs": [
      "In-Class Excercise",
      "2 - Superstore Sales and Profit Report"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.",
    "crumbs": [
      "Take-Home Exercise 1",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-the-data",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "4.1 Load the Data",
    "text": "4.1 Load the Data\nFirst we load the data.\n\ndemographic_data &lt;- read_csv(\"data/respopagesexfa2024.csv\")",
    "crumbs": [
      "Take-Home Exercise 1",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-the-data",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "4.2 Check the Data",
    "text": "4.2 Check the Data\n\n\n\n\n\n\nFrom the first glance, we notice that there are ‘0’ Pop in the dataset. For this exercise, we will be focusing on the top-level visualization per Planning Areas and granular details like Population per Subzone and Floor Area aren’t necessary. We should exclude those rows with zero population values at the Planning Area level. This will help clean up the data and make the visualizations clearer by removing unnecessary zeros. We will do it in Chapter 4.3\n\n\n\n\n\n\nDid you know?\n\n\n\nThere are more R packages that can help you to view or describe data. E.g. Hmisc, psych, qreport package. I will be using qreport here\nIf you have yet to install qreport, install it by typing below in the Console:\n\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\ninstall.packages(\"qreport\")\n\n\n\nHere I am using qreportpackage’s dataOverview that I already pre-load earlier.\n\ndataOverview(demographic_data, plot = c(\"none\"),)\n\ndemographic_data has 75696 observations (75696 complete) and 7 variables (7 complete)\n\n\n|Variable |Type       | Distinct|  Info| Symmetry| NAs|Rarest Value            | Frequency of Rarest Value|Mode        | Frequency of Mode|\n|:--------|:----------|--------:|-----:|--------:|---:|:-----------------------|-------------------------:|:-----------|-----------------:|\n|PA       |Nonnumeric |       55| 0.999|    0.991|   0|Central Water Catchment |                       228|Bukit Merah |              3876|\n|SZ       |Nonnumeric |      332| 1.000|    1.000|   0|Admiralty               |                       228|Admiralty   |               228|\n|AG       |Discrete   |       19| 0.997|    1.000|   0|0_to_4                  |                      3984|0_to_4      |              3984|\n|Sex      |Discrete   |        2| 0.750|    1.000|   0|Females                 |                     37848|Females     |             37848|\n|FA       |Discrete   |        6| 0.972|    1.000|   0|&lt;= 60                   |                     12616|&lt;= 60       |             12616|\n|Pop      |Continuous |      183| 0.831|    6.953|   0|1260                    |                         1|0           |             41742|\n|Time     |Discrete   |        1| 0.000|    1.000|   0|2024                    |                     75696|2024        |             75696|\n\n\nLet’s also count what’s the total Pop\n\ncntpop &lt;- demographic_data %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) \ncat(cntpop$Pop)\n\n4187720\n\n\n\nObservation\n\nThe data shows Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex as of June 2024 with total population of 4,187,720.\nWe observe that there are 75,696 rows and 7 columns. No missing values are observed. Refer to the column legend in Appendix A\nThere are a total of seven attributes. 5 of them are categorical data type and the other three are in numerical data type.\n\nThe categorical attributes are: PA, SZ, AG, Sex, FA.\nThe numerical attributes are: Pop, Time.\n\nWe can also observe how many distinct values for each Variable. This will help us think what to use for our visualization.",
    "crumbs": [
      "Take-Home Exercise 1",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dataprep",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dataprep",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "4.3 Data Preparation",
    "text": "4.3 Data Preparation\n\n4.3.1 Cleaning Data\nAs mentioned earlier, we will be focusing on the top-level visualization per Planning Areas and granular details like Population per Subzone and Floor Area aren’t necessary. Here we will exclude those rows with zero population values at the Planning Area level by using filter.\n\nCleaned DataCode\n\n\n\n\n\n\n\n\n\n\nClean using filter and display as data table\n\ndemographic_data_clean &lt;- demographic_data %&gt;%\n  filter(Pop &gt; 0)\n\nDT::datatable(demographic_data_clean , options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20)))\n\n\n\n\n\n\n4.3.2 Age Group recoding\nWe will be recoding the Age Group to three groups for clearer visualization: Below 20 years, 20-64 Years, 65 years & Over following National Statistical Standards Recommendations on Definition and Classification of Age (More details in Appendix B ).\n\nDataCode\n\n\n\n\n\n\n\n\n\n\n\ndemographic_data_recode &lt;- demographic_data_clean %&gt;%\n  mutate(\n    AG_recode = recode(\n      AG,\n      \"0_to_4\" = \"Below 20 Years\",\n      \"5_to_9\" = \"Below 20 Years\",\n      \"10_to_14\" = \"Below 20 Years\",\n      \"15_to_19\" = \"Below 20 Years\",\n      \"20_to_24\" = \"20-64 Years\",\n      \"25_to_29\" = \"20-64 Years\",\n      \"30_to_34\" = \"20-64 Years\",\n      \"35_to_39\" = \"20-64 Years\",\n      \"40_to_44\" = \"20-64 Years\",\n      \"45_to_49\" = \"20-64 Years\",\n      \"50_to_54\" = \"20-64 Years\",\n      \"55_to_59\" = \"20-64 Years\",\n      \"60_to_64\" = \"20-64 Years\",\n      \"65_to_69\" = \"65 Years and Above\",\n      \"70_to_74\" = \"65 Years and Above\",\n      \"75_to_79\" = \"65 Years and Above\",\n      \"80_to_84\" = \"65 Years and Above\",\n      \"85_to_89\" = \"65 Years and Above\",\n      \"90_and_over\" = \"65 Years and Above\"\n    )\n  )\n\nDT::datatable(demographic_data_recode , options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20)))",
    "crumbs": [
      "Take-Home Exercise 1",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#top-10-planning-areas-pa-ranked-by-size-of-resident-population-pop",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#top-10-planning-areas-pa-ranked-by-size-of-resident-population-pop",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "5.1 Top 10 Planning Areas (PA) Ranked by Size of Resident Population (Pop)",
    "text": "5.1 Top 10 Planning Areas (PA) Ranked by Size of Resident Population (Pop)\n\n🎀 Plot 1CodeDeepdive for more insights\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop10PA &lt;- demographic_data_clean %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  slice_max(order_by = Pop, n = 10)\n\ntop10plot &lt;- ggplot(data = top10PA, \n       aes(y = reorder(PA, Pop/1000), x = Pop/1000)) +  # reorder PA by Pop\n  geom_col(show.legend = FALSE, fill = \"pink4\") +\n  geom_text(aes(label = (Pop/1000)),\n            hjust = -0.2, color = \"black\", size = 3) +\n  ggtitle(\"Top 10 Planning Areas in 2024\\nRanked by Size of Singapore Resident Population\",\n  subtitle = paste(\"Total resident population:\", \n                 format(round(cntpop$Pop / 1000, 2), big.mark = \",\"), \n                 \"thousand\")) +\n  labs(\n    y = NULL,\n    x = \"Resident Population\\nin thousands (‘000)\",\n    caption = \"Source: singstat.gov.sg\"\n  ) +\n  theme_ipsum(base_family = \"Arial\",\n  plot_title_size = 14,\n  subtitle_size = 10,\n  caption_size = 8,\n  plot_title_face = \"bold\",\n  caption_face = \"italic\",\n  grid = \"\",\n  axis_title_face = \"bold\",\n  axis_title_size = 11) +\n  theme(axis.text.x = element_blank(),\n        axis.text.y = element_text(size=11, face=\"bold\"),\n        axis.title.x = element_text(hjust = 0.5)\n        )+\n  scale_x_continuous(expand = expansion(mult = c(0, 0.1)))\n\ntop10plot\n\n\n\n\n# Total population of the top 10 Planning Area\ncntpoptop10 &lt;- top10PA %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) \ncat(cntpoptop10$Pop)\n\n2358550\n\n\n\n# The percentage of the population of the top 10 most populous Planning Area relative to the total population.\nperc_pop_top10 &lt;- (cntpoptop10 / cntpop) * 100\ncat(perc_pop_top10$Pop)\n\n56.32062\n\n\n\n\n\n\n🎀 Insights Plot 1\n\nSlightly over half (56.3%) of the 4,187.72 thousand (~4.19 million) residents in Singapore stayed in the top 10 planning areas of residence.\nThere were five planning areas with more than 250,000 residents each, namely Tampines, Bedok, Sengkang, Jurong West, and Woodlands.\nTampines was the most populated with 284,720 residents.",
    "crumbs": [
      "Take-Home Exercise 1",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-group-and-sex-distribution",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-group-and-sex-distribution",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "5.3 Age Group and Sex distribution",
    "text": "5.3 Age Group and Sex distribution\n\n🎀 Plot 2CodeAlternative PlotDeepdive for more insights\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Define age group levels and labels\nAG_levels &lt;- c(\n  \"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\",\n  \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\",\n  \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\",\n  \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\"\n)\n\nAG_labels &lt;- c(\n  \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\",\n  \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65-69\", \"70-74\", \"75-79\",\n  \"80-84\", \"85-89\", \"&gt;90\"\n)\n\nAG_lookup &lt;- setNames(AG_labels, AG_levels)\n\n# Compute population shares by age group\nAGsum2 &lt;- demographic_data_clean %&gt;%\n  group_by(AG) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  mutate(\n    AG = factor(AG, levels = AG_levels),\n    Pop_share = Pop / sum(Pop),\n    cum_share = cumsum(Pop_share),\n    percentile = round(cum_share * 100, 1)\n  ) %&gt;%\n  arrange(AG)\n\n# Median and Q3 age groups\nmedian_AG &lt;- AGsum2 %&gt;% filter(cumsum(Pop) &gt;= sum(Pop) / 2) %&gt;% slice(1) %&gt;% pull(AG)\nq3_AG     &lt;- AGsum2 %&gt;% filter(cumsum(Pop) &gt;= sum(Pop) * 0.75) %&gt;% slice(1) %&gt;% pull(AG)\n\n# Convert median and Q3 to labels\nmedian_label &lt;- AG_lookup[as.character(median_AG)]\nq3_label     &lt;- AG_lookup[as.character(q3_AG)]\n\n# Prepare population pyramid data\npyramid_data &lt;- demographic_data_clean %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Population = sum(Pop, na.rm = TRUE) / 1000, .groups = \"drop\") %&gt;%\n  mutate(\n    AG = factor(AG, levels = AG_levels, labels = AG_labels, ordered = TRUE),\n    PopPercentage = ifelse(Sex == \"Females\", -Population, Population) / sum(Population) * 100,\n    PopPercentage = round(PopPercentage, 2),\n    Signal = ifelse(Sex == \"Females\", -1, 1)\n  )\n\n\n# Create the population pyramid plot\npyramid_plot &lt;- ggplot(pyramid_data, aes(x = AG, y = PopPercentage, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(y = PopPercentage + Signal * 0.5, label = abs(PopPercentage)),\n            size = 3, color = \"black\") +\n  coord_flip() +\n  scale_fill_manual(values = c(\"Females\" = \"pink2\", \"Males\" = \"steelblue\"),\n                    guide = guide_legend(override.aes = list(fill = NA))) +\n  scale_y_continuous(labels = abs) +\n  annotate(\"segment\", x = median_label, xend = median_label, y = -4, yend = 3.6,\n           color = \"red4\", linewidth = 0.7, linetype = \"dotted\") +\n  annotate(\"text\", x = median_label, y = 5, label = \"Median\",\n           color = \"red4\", size = 2.8, fontface = \"bold\") +\n  annotate(\"segment\", x = q3_label, xend = q3_label, y = -3.65, yend = 3.65,\n           color = \"red4\", linewidth = 0.7, linetype = \"dotted\") +\n  annotate(\"text\", x = q3_label, y = 5, label = \"Q3\",\n           color = \"red4\", size = 2.8, fontface = \"bold\") +\n  ggtitle(\"Population Pyramid of Singapore Residents\\nby Age and Sex 2024\",\n          subtitle = \"in percentage (%)\") +\n  labs(\n    y = \"Population (%)\",\n    x = \"Age Group\",\n    fill = \"Sex\",\n    caption = \"Source: singstat.gov.sg\"\n  ) +\n  theme_ipsum(base_family = \"Arial\",\n              plot_title_size = 14,\n              subtitle_size = 10,\n              caption_size = 8,\n              plot_title_face = \"bold\",\n              caption_face = \"italic\",\n              grid = \"Y\",\n              axis_title_face = \"bold\",\n              axis_title_size = 11,\n              axis_text_size = 8) +\n  theme(\n    strip.text = element_text(face = \"bold\"),\n    axis.title.x = element_text(hjust = 0.5),\n    axis.title.y = element_text(hjust = 0.5),\n    legend.position = \"top\",\n    legend.title = element_blank(),\n    legend.justification = c(0.45, 0),\n    legend.margin = margin(t = -20, r = 0, b = -10, l = 0, unit = \"pt\")\n  )\n\npyramid_plot\n\n\n\nAlternatively for more simpler visualisation we can also use this plot, though we can only infer Age Distribution Insights from this plot.\n\n\n\n\n\n\n\n\n\n\n\n\n# Details of the population pyramid distribution\nprint(pyramid_data, n = 38)\n\n# A tibble: 38 × 5\n   AG    Sex     Population PopPercentage Signal\n   &lt;ord&gt; &lt;chr&gt;        &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1 0-4   Females      83.4          -1.99     -1\n 2 0-4   Males        87.5           2.09      1\n 3 10-14 Females     100.           -2.4      -1\n 4 10-14 Males       104.            2.49      1\n 5 15-19 Females     104.           -2.49     -1\n 6 15-19 Males       107.            2.56      1\n 7 20-24 Females     110.           -2.64     -1\n 8 20-24 Males       115.            2.74      1\n 9 25-29 Females     135.           -3.22     -1\n10 25-29 Males       135.            3.23      1\n11 30-34 Females     166.           -3.95     -1\n12 30-34 Males       156.            3.71      1\n13 35-39 Females     166            -3.96     -1\n14 35-39 Males       149.            3.56      1\n15 40-44 Females     164.           -3.92     -1\n16 40-44 Males       147.            3.5       1\n17 45-49 Females     158.           -3.77     -1\n18 45-49 Males       144.            3.44      1\n19 50-54 Females     158.           -3.78     -1\n20 50-54 Males       149.            3.56      1\n21 55-59 Females     150.           -3.58     -1\n22 55-59 Males       145.            3.46      1\n23 5-9   Females      98.9          -2.36     -1\n24 5-9   Males       104.            2.47      1\n25 60-64 Females     150.           -3.57     -1\n26 60-64 Males       147.            3.52      1\n27 65-69 Females     136.           -3.25     -1\n28 65-69 Males       130.            3.12      1\n29 70-74 Females     107.           -2.57     -1\n30 70-74 Males        99.3           2.37      1\n31 75-79 Females      72.9          -1.74     -1\n32 75-79 Males        61.9           1.48      1\n33 80-84 Females      45.1          -1.08     -1\n34 80-84 Males        32.7           0.78      1\n35 85-89 Females      27.2          -0.65     -1\n36 85-89 Males        16.9           0.4       1\n37 &gt;90   Females      17.4          -0.42     -1\n38 &gt;90   Males         7.73          0.18      1\n\n# Details of the AG distribution\nAGsum2\n\n# A tibble: 19 × 5\n   AG             Pop Pop_share cum_share percentile\n   &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1 0_to_4      170930   0.0408     0.0408        4.1\n 2 5_to_9      202420   0.0483     0.0892        8.9\n 3 10_to_14    204610   0.0489     0.138        13.8\n 4 15_to_19    211560   0.0505     0.189        18.9\n 5 20_to_24    225020   0.0537     0.242        24.2\n 6 25_to_29    270090   0.0645     0.307        30.7\n 7 30_to_34    321010   0.0767     0.383        38.3\n 8 35_to_39    315180   0.0753     0.459        45.9\n 9 40_to_44    310700   0.0742     0.533        53.3\n10 45_to_49    301820   0.0721     0.605        60.5\n11 50_to_54    307760   0.0735     0.678        67.8\n12 55_to_59    294500   0.0703     0.749        74.9\n13 60_to_64    297020   0.0709     0.820        82  \n14 65_to_69    266580   0.0637     0.883        88.3\n15 70_to_74    206760   0.0494     0.933        93.3\n16 75_to_79    134810   0.0322     0.965        96.5\n17 80_to_84     77750   0.0186     0.983        98.3\n18 85_to_89     44050   0.0105     0.994        99.4\n19 90_and_over  25150   0.00601    1           100  \n\n\n\n\n\n\n🎀 Insights Plot 2\n\nThe median age falls within 40 to 44 age group. About 25% are aged 60 and above, with 18% aged 65 and older, highlighting aging population trend.\nChildren (0–14) account for only about 13.8% of the population, indicating low birth rates. Slightly more males than females are observed in this group.\nThe working-age population (15–64 years), as defined by the Ministry of Manpower, comprises around 68.2% of the population. This reflects a strong labour force, though future demographic challenges may arise as this group continues to age.\nThe 25-64 age group shows a near-equal gender balance.\nThe gender gap widens in the older age cohorts, with majority female in the 80+ age groups. This show that females live longer than males on average, consistent with the life expectancy at birth between the different gendersfrom 2023 report by the Singapore Department of Statistics.",
    "crumbs": [
      "Take-Home Exercise 1",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#association-between-age-group-distribution-and-planning-area-in-singapore",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#association-between-age-group-distribution-and-planning-area-in-singapore",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "5.3 Association Between Age Group Distribution and Planning Area in Singapore",
    "text": "5.3 Association Between Age Group Distribution and Planning Area in Singapore\n\n🎀 Plot 3Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntable_data &lt;- table(demographic_data_recode$AG_recode, demographic_data_recode$PA)\n\nchi_test &lt;- chisq.test(table_data)\n\nresiduals_df &lt;- as.data.frame(as.table(chi_test$residuals))\n\nAG_levels &lt;- c(\"Below 20 Years\", \"20-64 Years\", \"65 Years and Above\")\n\nAG_labels &lt;- c(\"Below 20 Years\", \"20-64 Years\", \"65 Years and Above\")\n\nresiduals_df &lt;- residuals_df %&gt;%\n  mutate(Var1 = factor(Var1, levels = AG_levels, labels = AG_labels, ordered = TRUE))\n\nggplot(residuals_df, aes(Var1, Var2, fill = Freq)) +\n  geom_tile() +\n  geom_text(aes(label = round(Freq, 2)), size = 4) +\n  scale_fill_gradient2(low = \"steelblue\", high = \"red3\", mid = \"white\", midpoint = 0) +\n  labs(x = \"AG\", y = \"PA\", fill = \"Residuals\") +\n  ggtitle(\"Association Between Age Group\\nand Planning Area in Singapore 2024\",\n          subtitle = \"Meassured using Pearson's Chi-squared test\") +\n  labs(caption = \"Source: singstat.gov.sg\")+\n  theme_ipsum(base_family = \"Arial\",\n              plot_title_size = 14,\n              subtitle_size = 10,\n              caption_size = 8,\n              plot_title_face = \"bold\",\n              caption_face = \"italic\",\n              grid = \"Y\",\n              axis_title_face = \"bold\",\n              axis_title_size = 11,\n              axis_text_size = 8) +\n  theme(\n    strip.text = element_text(face = \"bold\"),\n    axis.text.x = element_text(size=10, face=\"bold\", angle = -45, hjust = 0),\n    axis.text.y = element_text(size=10),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    legend.title = element_blank(),\n    legend.justification = c(0.45, 0),\n    legend.margin = margin(t = -20, r = 0, b = -10, l = 0, unit = \"pt\"))+\n  scale_x_discrete(expand = expansion(add = 0.5)) +\n  scale_y_discrete(expand = expansion(add = 0.5)) \n\n\n\n\n\n🎀 Insights Plot 3\n\nCentral Areas like Downtown Core are skewed toward working-age group with strong over-representation of the 20–64 group (+7.46) and lesser children (–4.03) and seniors (–6.69), reflecting its role as a Central Business District. Similar patterns appear in Newton, Museum (Bras Basah, Dhoby Ghaut, Fort Canning), and Singapore River (Boat Quay, Clarke Quay, Robertson Quay).\nNew BTO areas like Tengah and Punggol show more children and lesser seniors, indicating young families moving into new Towns / Planning Areas.\nMature Towns such as Bedok, Ang Mo Kio, and Hougang exhibit neutral residuals, suggesting stable populations with a mix of age groups and long-term residents.\nAffluent Districts such as Bukit Timah, we observe more children (+1.98) and 20-65 group (+2.99) with lesser seniors (-5.75). Proximity to “good schools” for kiasu parents likely attracts young wealthy families with its abundance of private housing. Similar trends observed in Tanglin.",
    "crumbs": [
      "Take-Home Exercise 1",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendixa",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendixa",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "7.1 Appendix A",
    "text": "7.1 Appendix A\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nPA\nPlanning Area\n\n\nSZ\nSubzone\n\n\nAG\nAge Group\n\n\nSex\nSex\n\n\nFA\nFloor Area of Residence\n\n\nPop\nResident Count (Population)\n\n\nTime\nTime / Period",
    "crumbs": [
      "Take-Home Exercise 1",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendixb",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#appendixb",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "7.2 Appendix B",
    "text": "7.2 Appendix B\nNational Statistical Standards Recommendations on Definition and Classification of Age\n\n\n\nAG\nAG_recode\n\n\n\n\n0_to_4\nBelow 20 years\n\n\n5_to_9\nBelow 20 years\n\n\n10_to_14\nBelow 20 years\n\n\n15_to_19\nBelow 20 years\n\n\n20_to_24\n20-64 Years\n\n\n25_to_29\n20-64 Years\n\n\n30_to_34\n20-64 Years\n\n\n35_to_39\n20-64 Years\n\n\n40_to_44\n20-64 Years\n\n\n45_to_49\n20-64 Years\n\n\n50_to_54\n20-64 Years\n\n\n55_to_59\n20-64 Years\n\n\n60_to_64\n20-64 Years\n\n\n65_to_69\n65 years & Over\n\n\n70_to_74\n65 years & Over\n\n\n75_to_79\n65 years & Over\n\n\n80_to_84\n65 years & Over\n\n\n85_to_89\n65 years & Over\n\n\n90_and_over\n65 years & Over",
    "crumbs": [
      "Take-Home Exercise 1",
      "1 - Demographic structures and distribution of Singapore in 2024"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Vanessa Riadi",
    "section": "",
    "text": "I am a Project Manager, Data Analyst, and Automation Specialist with a diverse experience across the automotive, public sector (social transfers), e-commerce, and media industries. Driven, curious, and highly motivated, passionate about continuous learning and development. Excel at adapting in fast-paced environments and delivering under pressure."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Vanessa Riadi",
    "section": "Education",
    "text": "Education\nSingapore Management University | Singapore\nAug 2024 - Dec 2025\nMasters of Information Technology in Business (Data Science & Analytics)\nCurrent GPA: 3.62 / 4.0\nCoventry University | Distant Learning\nOct 2015 - Dec 2018\nBachelor of Artrs in Digital Media"
  },
  {
    "objectID": "about.html#certifications",
    "href": "about.html#certifications",
    "title": "Vanessa Riadi",
    "section": "Certifications",
    "text": "Certifications\nMassachusetts Institute of Technology | Distant Learning\nJun 2023 - Sep 2023\nData Science and Machine Learning: Making Data-Driven Decisions\nCredential ID: ZOZVYKSV"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Vanessa Riadi",
    "section": "Experience",
    "text": "Experience\nPorsche | Singapore | Feb 2025 - present\nDigital Business Development Intern\n• Partner as a business owner with external scrum team including product owner, scrum master, and developers to develop, enhance and deploy Digital Service Hub products, such as internal Sales Funnel Excellence App and Porsche E-commerce Shop.\n• Identify gaps and propose actions to drive deployment and operational excellence in “Growth Region V5” markets including Singapore, Malaysia, Thailand, Korea, Japan, Taiwan, New Zealand and Australia.\n• Design and implement Excel-based report templates for Sales Funnel tracking, enabling data-driven decision-making through contact capture analysis and conversion rate monitoring.\nThird i | Singapore | Jan 2025\nData Engineering Intern\n• 4-week Data Engineering exploration to build Third i’s data systems for batch/real-time ingestion using Google BigQuery, PostgreSQL Database Management System (DBMS) and Amazon Web Services (AWS).\nCentral Provident Fund Board (CPFB) | Singapore | Apr 2024 – Dec 2024\nManager, Business Analytics | Agency Governance & Planning Department\n• Managed automation project and worked with cross-functional teams to develop and implement automation solution using Python.\nAward: Pinnacle Award at CPFB Excellence Award 2024 (Nov 2024) for enabling quicker implementation of government transfers through the Citizen Disbursement IT System achieving a 60% e[iciency in user e[ort and vendor costs per batch User Acceptance Testing (UAT).\n• Led and conducted data asnalysis and statistical projects using Python, Excel, and Power BI with cross- functional team members to guide policy principals and improve operational e[iciency.\nNotable Project: Customer Engagement Team (CET) GovBenefit Portal study where we investigate the spike in enquiry and appeal cases which led to UI/UX overhaul of GovBenefit website (https://www.govbenefits.gov.sg/).\nLazada Singapore | Singapore | May 2022 - Jan 2024\nSenior Data Analyst, Platform Operations | Commercial Department | Oct 2023 - Jan 2024\n• Analysed and delivered business and operational data insights to cross-functional team leaders and senior stakeholders that led to improved business performance measured by a 45.29% YoY GMV increase during the 11.11 campaign in 2023.\n• Supported cross-functional stakeholders by providing ad-hoc data analysis and build data visualisation dashboards using SQL, Excel, and Power BI.\n• Performance and vendor management including setting and monitoring key performance indicator (KPIs) such as sales target (GMV and Order Coverage) for commercial team category pillars (business development and account managers).\n\nSenior Data Analyst, Lazada Livestream | Marketing Department | May 2022 - Sep 2023\n• End-to-end project management for livestream content series and mega campaign shows. Including budget-setting and allocation for multiple projects under wing, collaborating and pitching for buy-ins from stakeholders and clients, sourcing for vendors (production houses, digital agencies, independent Key Opinion Leader [KOL]), schedule planning and ensuring timely deliverables from project team including vendors and cross-functional teams (in-house designer and motion graphic artist, scriptwriter outsourced to vendor, social media posting drafts from KOL).\n• Optimized show performance and production cost using data-driven strategies, cross-functional collaboration, brand sponsorship and partnerships.\nNotable Result: Boosted ROI by improving consideration score and sales metrics by 369%, while cutting production costs by 50% compared to the previous sales-driven series. Enhanced stickability by 44.6% in average watch time using engaging mechanics for audience retention.\n• Developed dashboard using SQL and Power BI to centralize country-specific livestream data, streamlining previously scattered regional-level dashboards.\nSGAG Media | Singapore | Dec 2021 - Apr 2022\nSenior Creative Executive\n• End-to-end project and stakeholder management for experimental talent incubation.\nNight Owl Cinematics | Singapore | Jan 2020 - Dec 2021\nCrew & Livestream Tech Lead\n• Managed digital media projects and client servicing across NOC’s YouTube, Instagram, and Facebook channels. Scope includes manpower and equipment scheduling, ensuring timely delivery of deliverables, and delivering post-campaign KPI analytics.\nNotable Result: Led livestream project using data to drive campaign performance. Achieved a record- breaking CapitaStar Livestream (Dec 2021) with over 240,000 viewers, 80,000 engagements, 6x daily sales uplift for eCapitaVouchers, and over 4x daily sales uplift for eCapitaMall and Capita3Eats across 2 days campaign.\nFirefly Photography | Singapore | Nov 2018 - Dec 2019\nContent Creator & Videographer/Editor\n• End-to-end project management and client servicing for corporate, event, and wedding, including notable projects such as NDP 2019 sponsorship with MINDEF on “NDP 2019 The Exchange Series”."
  },
  {
    "objectID": "about.html#skills",
    "href": "about.html#skills",
    "title": "Vanessa Riadi",
    "section": "Skills",
    "text": "Skills\nSoft Skills\nDesign Thinking, Analytical & Critical Thinking, Project Management, Stakeholder & Client Management, Problem Solving, Decision Making, Adaptability, Multitasking.\nTechnical Skills\nSQL, Python, Microsoft Excel, Tableau, Power BI, SAS.\nLanguages\nEnglish, Bahasa Indonesia, Mandarin"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html",
    "href": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#overview",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#installing-and-launching-r-packages",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nFor this exercise, the GGally, parcoords, parallelPlot and tidyverse packages will be used.\nThe code chunks below are used to install and load the packages in R.\n\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#data-preparation",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nIn this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\nwh &lt;- read_csv(\"../data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#plotting-static-parallel-coordinates-plot",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Plotting Static Parallel Coordinates Plot",
    "text": "Plotting Static Parallel Coordinates Plot\nIn this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\nPlotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\nPlotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\n\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\nParallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\nRotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\nAdjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods",
    "text": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\nThe basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.\n\n\nRotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\n\nChanging the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nParallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex09_4/hands-on_Ex09_4.html#references",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "References",
    "text": "References\n\nggparcoord() of GGally package\nparcoords user guide\nparallelPlot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html",
    "title": "Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#overview",
    "title": "Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#installing-and-launching-r-packages",
    "title": "Visual Correlation Analysis",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nBefore you get started, you are required to open a new Quarto document. Keep the default html authoring format.\nNext, you will use the code chunk below to install and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#importing-and-preparing-the-data-set",
    "title": "Visual Correlation Analysis",
    "section": "Importing and Preparing The Data Set",
    "text": "Importing and Preparing The Data Set\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\nImporting Data\nFirst, let us import the data into R by using read_csv() of readr package.\n\nwine &lt;- read_csv(\"../data/wine_quality.csv\")\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#building-correlation-matrix-pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#building-correlation-matrix-pairs-method",
    "title": "Visual Correlation Analysis",
    "section": "Building Correlation Matrix: pairs() method",
    "text": "Building Correlation Matrix: pairs() method\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore you continue to the next step, you should read the syntax description of pairsfunction.\n\nBuilding a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])\n\n\n\n\n\n\n\n\n\n\nDrawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\nIncluding with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#visualising-correlation-matrix-ggcormat",
    "title": "Visual Correlation Analysis",
    "section": "Visualising Correlation Matrix: ggcormat()",
    "text": "Visualising Correlation Matrix: ggcormat()\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, you will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\nThe basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#building-multiple-plots",
    "href": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#building-multiple-plots",
    "title": "Visual Correlation Analysis",
    "section": "Building multiple plots",
    "text": "Building multiple plots\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Visual Correlation Analysis",
    "section": "Visualising Correlation Matrix using corrplot Package",
    "text": "Visualising Correlation Matrix using corrplot Package\nIn this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\nBefore getting started, you are required to read An Introduction to corrplot Package in order to gain basic understanding of corrplot package.\n\nGetting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\nWorking with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\nFeel free to change the method argument to other supported visual geometrics.\n\n\nWorking with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them.\n\n\nWorking with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\nCombining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\n\n\n\n\n\n\n\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\nReorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\nReordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09_2/hands-on_Ex09_2.html#r-packages",
    "title": "Visual Correlation Analysis",
    "section": "R packages",
    "text": "R packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#overview",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#getting-started",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.2.2 Getting Started",
    "text": "3.2.2 Getting Started\n\n3.2.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\n\n\n\n\n\n\n\n\n\n\nLoad the Packages\n\n\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\n\n3.2.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\nmutate_at()across()Deprecated\n\n\nUsing mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.2.3 Animated Data Visualisation: gganimate methods",
    "text": "3.2.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n3.2.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n3.2.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nThe plot & code\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n🎀 Practice\nease_aes() require modifiers for non linear. Let’s try some of the fun ones!\n\nelastic-outback-in-out\n\n\nWith values and color by continent\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Continent)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = continent_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('elastic-out') \n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('back-in-out')",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.2.4 Animated Data Visualisation: plotly",
    "text": "3.2.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n3.2.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n3.2.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\n🎀 PRACTICEThe plotThe code chunk\n\n\nI saw this video about Plotly on Youtube, and I want to try!\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          marker=list(sizemode=\"diameter\"),\n          frame = ~Year, \n          text = ~paste(\"Country: \", Country, \n                        \"&lt;br&gt;\",\n                        \"Continent:\", Continent, \n                        \"&lt;br&gt;\",\n                        \"Population:\", Population), \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(title=\"Animated Plotly Bubble Plot\", margin = list(t = 50))\nbp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03_2/hands-on_Ex03_2.html#reference",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.2.5 Reference",
    "text": "3.2.5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.2 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_2/hands-on_Ex04_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_2/hands-on_Ex04_2.html",
    "title": "Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.2 - Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_2/hands-on_Ex04_2.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04_2/hands-on_Ex04_2.html#learning-outcome",
    "title": "Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.2 - Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_2/hands-on_Ex04_2.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04_2/hands-on_Ex04_2.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Visual Statistical Analysis",
    "section": "2 Visual Statistical Analysis with ggstatsplot",
    "text": "2 Visual Statistical Analysis with ggstatsplot\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n-   To provide alternative statistical inference methods by default.\n-   To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.2 - Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_2/hands-on_Ex04_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04_2/hands-on_Ex04_2.html#getting-started",
    "title": "Visual Statistical Analysis",
    "section": "3 Getting Started",
    "text": "3 Getting Started\n\n3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n3.2 Importing data\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\nImporting Exam.csv data by using appropriate tidyverse package.\n\n\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\n3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n3.7.1 ggbetweenstats - Summary of tests\n\n\n\n\n\n\n3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.2 - Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html",
    "title": "Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.3 - Visualising Uncertainty"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#learning-outcome",
    "title": "Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.3 - Visualising Uncertainty"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#getting-started",
    "title": "Visualising Uncertainty",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"../data/Exam_data.csv\")",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.3 - Visualising Uncertainty"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Visualising Uncertainty",
    "section": "3 Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "3 Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe code chunkThe table\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard Error of Mean Maths Score by Race\") \n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\n\n\n3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths Score\",\n       title = \"95% Confidence Interval of Mean Maths Score by Race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\n\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n\n\n\n3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(5,7),\n\nggplotly((ggplot(shared_df) +\n            geom_errorbar(aes(x=reorder(RACE, -mean), ymin=mean-2.58*se, ymax=mean+2.58*se), width=0.2, colour=\"black\", alpha=0.9, linewidth=0.5) +\n            geom_point(\n              aes (x=RACE, y=mean, \n                   text = paste(\"Race:\", `RACE`,\"&lt;br&gt;N:\", `n`,\"&lt;br&gt;Avg. Scores:\", \n                                round(mean, digits = 2),\"&lt;br&gt;95% CI:[\", \n                                round((mean-2.58*se), digits = 2), \",\", \n                                round((mean+2.58*se), digits = 2),\"]\")), \n              stat=\"identity\", color=\"red\", size = 1.5, alpha=1) + \n            xlab(\"Race\") + \n            ylab(\"Average Scores\") + \n            theme_minimal() + \n            theme(axis.text.x = \n                    element_text(angle = 45, vjust = 0.5, hjust=1)) + \n            ggtitle(\"95% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n         tooltip = \"text\"), \nDT::datatable(shared_df, \n              rownames = FALSE, \n              class=\"compact\", \n              width=\"90%\", \n              options = list(pageLength = 10, scrollX=T), \n              colnames = c(\"No. of pupils\", \"Avg Scores\",\"Std Dev\",\"Std Error\")) %&gt;%\n  formatRound(columns=c('mean', 'sd', 'se'), digits=2) \n)",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.3 - Visualising Uncertainty"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#visualising-uncertainty-ggdist-package",
    "title": "Visualising Uncertainty",
    "section": "4 Visualising Uncertainty: ggdist package",
    "text": "4 Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Confidence Intervals of Mean Math Score\",\n    subtitle = \"Mean Point + Multiple-interval plot\",\n    y = \"AVERAGE SCORE\")+\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 10, face = \"italic\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Confidence Intervals of Mean Math Score\",\n    subtitle = \"Median Point + Multiple-interval plot\",\n    y = \"AVERAGE SCORE\")+\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 10, face = \"italic\")  \n  )\n\n\n\n\n\n\n\n\n\n\n4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\n\n\n\n\n\nYour turn\n\n\n\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Confidence Intervals of Mean Math Score\",\n    subtitle = \"Mean Point + Multiple-interval plot\",\n    y = \"AVERAGE SCORE\")+\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 10, face = \"italic\") \n  )\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n4.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Confidence Intervals of Mean Math Score\",\n    subtitle = \"Gradient + interval plot\",\n    y = \"AVERAGE SCORE\")+\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 10, face = \"italic\")\n  )\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.3 - Visualising Uncertainty"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04_3/hands-on_Ex04_3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Visualising Uncertainty",
    "section": "5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\n5.1 Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nNote: You only need to perform this step once.\n\n\n5.2 Launch the application in R\n\nlibrary(ungeviz)\n\n\n\n5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() +                    \n  labs(\n    title = \"Confidence Intervals of Mean Math Score\",\n    y = \"AVERAGE SCORE\",\n    x = \"RACE\")+\n  theme(plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5))+\n  transition_states(.draw, 1, 3)",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.3 - Visualising Uncertainty"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#learning-outcome",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#getting-started",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.2 Getting Started",
    "text": "3.1.2 Getting Started\nFirst, write a code to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\n\n\n\n\n\nNote\n\n\n\nInstall and launch the R packages\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#importing-data",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.3 Importing Data",
    "text": "3.1.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.1.4 Interactive Data Visualisation - ggiraph methods\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n3.1.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code to plot an interactive statistical graph by using ggiraph package. Notice that the code consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\nStep 1Step 2\n\n\nFirst, create the basic graph. We are using interactive version of ggplot2 geom (i.e. geom_dotplot_interactive())\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\ngeom_dotplot_interactive(\n  aes(tooltip = ID),\n  stackgroups = TRUE, \n  binwidth = 1, \n  method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n\n\n\n\n\n\n\nNext, enable the tooltip using girafe(). This generates an svg object to be displayed on an html page.\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  #width_svg = 6 if you enable this it will override ur fig-width above\n  #height_svg = 6*0.618 if you enable this it will override ur fig-height above\n)",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#displaying-multiple-information-on-tooltip",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.5 Displaying multiple information on tooltip",
    "text": "3.1.5 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code below.\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  #height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code create a new field called tooltip. We assign the value ID and CLASS fields into the newly created fields.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         # We assign the value ID and CLASS fields into the newly created fields. \n  \"\\n Class = \", exam_data$CLASS)) #\\n is to enter to next line\n\nThis newly created field is used as tooltip field as shown in the code of line 7.\n\n   aes(tooltip = exam_data$tooltip)\n\n\n🎀 PRACTICE\nDisplay all information in the tool-top for all subjects by adding more fields in the tooltip\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID, \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,    \n  \"\\n Race = \", exam_data$GENDER)) \n\n\nEnglishMathScience\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID, \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,    \n  \"\\n Race = \", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8\n)\n\n\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID, \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,    \n  \"\\n Race = \", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8\n)\n\n\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID, \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,    \n  \"\\n Race = \", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8\n)",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#customising-tooltip-style",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6 Customising Tooltip style",
    "text": "3.1.6 Customising Tooltip style\nCode below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\nwhitepink & sans-serif font\n\n\nBackground colour of the tooltip is white and the font colour is black and bold\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,        \n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\nBackground colour of the tooltip is pink, font colour is black and bold, font family is sans-serif\n\ntooltip_css &lt;- \"background-color:pink; #&lt;&lt;\nfont-style:bold; color:black; font-family:sans-serif\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#practice-1",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#practice-1",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.1 🎀 PRACTICE",
    "text": "3.1.6.1 🎀 PRACTICE\nWe can customise more items using the arguments from geom_dotplot_interactive() Interactive Parameters and opts_tooltip Arguments Let’s try some of them!\n\ntooltipfillopts_tooltiptooltip_css\n\n\nDefine what you want to display on hover using tooltip\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = GENDER),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p\n)\n\n\n\n\n\n\n\nColour your histodot using fill\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = GENDER),\n    fill = \"pink4\",\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p\n)\n\n\n\n\n\n\n\nChange your tooltip background using opts_tooltip\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = GENDER),\n    fill = \"pink4\",\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ng &lt;- girafe(ggobj = p)\n\ngirafe_options(g,\n  opts_tooltip(opacity = .7,\n    offx = 20, offy = -10,\n    use_fill = TRUE, use_stroke = TRUE,\n    delay_mouseout = 1000) )\n\n\n\n\n\n\n\nWe can add extra css to further customize tooltip area using css\n\ntooltip_css &lt;- \"background-color:pink; \nfont-style:bold; color:white; font-family: 'Comic Sans MS', sans-serif;\" \n#| fig-height: 3\n#| fig-width: 8\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = GENDER),\n    fill = \"pink4\",\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ng &lt;- girafe(ggobj = p)\n\ngirafe_options(g,\n  opts_tooltip(\n    css = tooltip_css,\n    opacity = .7,\n    offx = 20, offy = -10,\n    use_fill = TRUE, use_stroke = TRUE,\n    delay_mouseout = 1000) )",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#displaying-statistics-on-tooltip",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.2 Displaying statistics on tooltip",
    "text": "3.1.6.2 Displaying statistics on tooltip\nCode below shows an advanced way to customise tooltip. In this example, tooltip and stat_summary are used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point)\n\n\n\n\n\n\n🎀 PRACTICE\nUse tooltip and stat_summary to show maximum and minimum Maths score for each classes.\n\ntooltip &lt;- function(ymin, ymax, accuracy = .01) {\n  max &lt;- scales::number(ymax, accuracy = accuracy)\n  min &lt;- scales::number(ymin, accuracy = accuracy)\n  paste(\"Max maths scores:\", max, \"\\n Min maths scores:\", min)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = CLASS),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(ymax, ymin))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf no aggregation functions are supplied, will default to mean_se().",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#hover-effect-with-data_id-aesthetic",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.3 Hover effect with data_id aesthetic",
    "text": "3.1.6.3 Hover effect with data_id aesthetic\nCode below shows the second interactive feature of ggiraph, namely data_id.\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p)                                        \n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nFrom the note given, means we can edit the hover_css using the same method as girafe_options that we explored earlier in opts_tooltip. Let’s try that!\n\n\n\nhover_css &lt;- \"fill:deepskyblue;\"\n#| fig-height: 3\n#| fig-width: 8\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ng &lt;- girafe(ggobj = p)\n\ngirafe_options(g, opts_hover(css = hover_css))",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#styling-hover-effect",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.4 Styling hover effect",
    "text": "3.1.6.4 Styling hover effect\nIn the code below, css codes are used to change the highlighting effect.\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDifferent from previous example, in this example the ccs customisation request are encoded directly in options.\n\n\n\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nUsing the opts_hover above we can customize the rendering of graphic elements when user hovers over them. Let’s try other usages!\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,\n    fill = \"pink\",\n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,\n  options = list(                        \n    opts_hover(css = \"fill: red;\"),  \n    opts_hover_inv(css = \"fill:black; opacity:0.2;\") \n  )                                        \n)",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#combining-tooltip-and-hover-effect",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.5 Combining tooltip and hover effect",
    "text": "3.1.6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code below.\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,\n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,    \n  options = list(                         \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#click-effect-with-onclick",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.6 Click effect with onclick",
    "text": "3.1.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code below shown an example of onclick.\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\", as.character(exam_data$ID) )\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #&lt;&lt;\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#coordinated-multiple-views-with-ggiraph",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.1.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nWe’ve learned about patchwork before here in Hands-on Exercise 2. Hence we know that you can also do other ways to combine graphs. Let’s try it below!\n\n\n\nSide-by-sideTop and bottom\n\n\nUsing + in print(p1 + p2)\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\nUsing / in print(p1 / p2)\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )                                        \n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.1.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.1.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n3.1.7.2 Working with visual variable: plot_ly() method\nIn the code below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n3.1.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code is ggplotly().\n\n\n\n\n\n3.1.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\n\n\n\n\nNote\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)  \np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\nVisit this link to learn more about crosstalk,\n\n\n\n\n\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nWhen we hover on the subplot keyword in RStudio, we can see what attributes are available like this: \n\n\nSince the example code given above are not clear enough (doesn’t state X & Y label), we should add them in. Let’s also try other configuration to combine the plots!\n\nSide By Side SubplotsStacked SubplotsMultiple Subplots\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)  \np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\nfig &lt;- subplot(ggplotly(p1),\n        ggplotly(p2), titleX = TRUE, titleY = TRUE, margin = 0.08) %&gt;% \n  layout(title = 'Side By Side Subplots', margin = list(t = 50))\nfig\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)  \np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nfig &lt;- subplot(ggplotly(p1),\n        ggplotly(p2), nrows = 2, titleX = TRUE, titleY = TRUE, margin = 0.12) %&gt;% \n  layout(title = 'Stacked Subplots', margin = list(t = 50))\nfig\n\n\n\n2 x 2 subplot grid and populating each subplot with scatter trace.\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)  \np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np3 &lt;- ggplot(data=d, \n            aes(x = ENGLISH,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nfig &lt;- subplot(ggplotly(p1),\n        ggplotly(p2), ggplotly(p3), nrows = 2, titleX = TRUE, titleY = TRUE, margin = 0.08) %&gt;% \n  layout(title = 'Multiple Subplots', margin = list(t = 50))\nfig",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.8 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.1.8 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.1.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n🎀 PRACTICE\n\n\n\n\n\n\nTip\n\n\n\nMore info and arguments that we can use on Datatables. Let’s try some!\n\n\n\nPage lengthHeader colorSelect specific column\n\n\n\nDT::datatable(exam_data , options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20)\n))\n\n\n\n\n\n\n\n\nDT::datatable(exam_data, options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20),\n  initComplete = JS(\n    \"function(settings, json) {\",\n    \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n    \"}\")\n))\n\n\n\n\n\n\n\nDataTables does not provide column filters by default. Thus we can work around this by selecting the column and defining a new variable exam_data_selected\n\nexam_data_selected &lt;- exam_data %&gt;%\n  select(ID, CLASS, GENDER, ENGLISH, MATHS, SCIENCE)\n\nDT::datatable(exam_data_selected, options = list(\n  columnDefs = list(list(className = 'dt-center', targets = 5)),\n  pageLength = 5,\n  lengthMenu = c(5, 10, 15, 20),\n  initComplete = JS(\n    \"function(settings, json) {\",\n    \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n    \"}\")\n))\n\n\n\n\n\n\n\n\n\n\n\n3.1.8.2 Linked brushing: crosstalk method\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data_selected)\np &lt;- ggplot(d, aes(ENGLISH, MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p), \n                \"plotly_selected\")\n\ncrosstalk::bscols(gg, DT::datatable(d), widths = 5)     \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03_1/hands-on_Ex03_1.html#reference",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "3.1.9 Reference",
    "text": "3.1.9 Reference\n\n3.1.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\n\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.1.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Exercise 3",
      "3.1 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, we learn several ggplot2 extensions for creating more elegant and effective statistical graphics that allow us to:\n\nControl the placement of annotation on a graph by using functions provided in ggrepel package,\nCreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nPlot composite figure by combining ggplot2 graphs by using patchwork package.",
    "crumbs": [
      "Hands-On Exercise 2",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#overview",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, we learn several ggplot2 extensions for creating more elegant and effective statistical graphics that allow us to:\n\nControl the placement of annotation on a graph by using functions provided in ggrepel package,\nCreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nPlot composite figure by combining ggplot2 graphs by using patchwork package.",
    "crumbs": [
      "Hands-On Exercise 2",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#getting-started",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.2 Getting started",
    "text": "2.2 Getting started\n\n2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, these four R packages will be used:\n\nggrepel: a R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: a R package provides some extra themes, geoms, and scales for ggplot.\nhrbrthemes: a R package provides typographu-centric themes and theme components for ggplot2.\npatchwork: a R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also load them onto your working R environment.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n2.2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Exercise 2",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\n🎀 PRACTICEThe plot & code\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID,\n                 colour = GENDER), #added colours\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n2.3.1 Working with ggrepel\n\n🎀 PRACTICEThe plot & code\n\n\nApplied colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID,\n                       colour = GENDER), #colour for gender\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")",
    "crumbs": [
      "Hands-On Exercise 2",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\n🎀 Let’s explore the different ggplot2 themes\n\nlightdarkgraybwlinedrawclassicminimalvoid\n\n\ntheme_light() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"pink3\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"pink3\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_linedraw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n\n2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\n🎀 Let’s explore some of the ggthemes\n\nWall Street JournalThe EconomistStata graphSolarized\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\",\n                 linewidth = 0.3) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj() + theme ()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_solarized()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n🎀 Let’s explore some of the hrbrthemes\n\nipsumft_rcmodern_rcipsum_rc\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ft_rc()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_modern_rc()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum_rc()\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Read more here to learn more.\n\n\n🎀 Let’s explore the different arguments\n\ngridbase_familysizes & face\n\n\n\nNo grid theme_ipsum(grid = \"\")\nHorizontal grid theme_ipsum(grid = \"Y\")\nVertical grid theme_ipsum(grid = \"X\")\nBoth axes grid theme_ipsum(grid = \"XY\")\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"XY\") \n\n\n\n\n\n\n\n\n\n\n\n\nDefault base_family for theme_ipsum is “Arial Narrow”\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(\n  base_family = \"Comic Sans MS\",\n  grid = \"\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\nYou can use this to showcase layout and font hierarchy.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\",\n  subtitle = \"Based on Primary 3 year-end exam results\") +\nlabs(caption = \"Source: exam_data.csv\") +\ntheme_ipsum(\n  base_family = \"Times New Roman\",\n  plot_title_size = 20,\n  subtitle_size = 14,\n  caption_size = 12,\n  plot_title_face = \"bold\",\n  caption_face = \"italic\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore information on hrbrmstr packages and themes\n\n\n\nFor more information on hrbrmstr package and themes click here\nYou can go to each theme and find the list of arguments you can use to customise the theme\n(e.g. list of arguments for theme_ipsum()) can be found here",
    "crumbs": [
      "Hands-On Exercise 2",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#beyond-single-graph",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs.\n\np1p2p3\n\n\nFirst, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\nNext\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\n\n\n\n\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🎀 PRACTICE\nIf you want to auto-wrap your title to fit within n numbers characters per line you can use stringr::str_wrap() from stringr library\n\n\n\n\n\n\nNote\n\n\n\nInstall stringr package by typing below in the Console:\n\ninstall.packages(\"stringr\")\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(stringr::str_wrap(\"English scores versus Maths scores for Primary 3\", width = 30)) +\n  theme_wsj() +\n  theme(plot.title = element_text(hjust = 0.5, size = 15, face = \"bold\"))\n\np3\n\n\n\n\n\n\n\n\n\n\n2.5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\n🎀 PRACTICEThe plot & code\n\n\n\np2 + p3\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n🎀 PRACTICEThe plot & code\n\n\n\npatchwork &lt;- p3 | ( p2 / p1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n🎀 PRACTICEThe plot & code\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n🎀 PRACTICEThe plot & code\n\n\n\np3 + inset_element(p2, \n                   left = 0.3, \n                   bottom = 0, \n                   right = 1, \n                   top = 0.6)\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nLet’s practice creating figures by combining patchwork and ggthemes packages.\n\n🎀 PRACTICE\n\nlayout 1 & theme_economistlayout 2 & theme_wsj\n\n\n\npatchwork &lt;- p3 | (p2 / p1)\npatchwork & theme_economist() +\n  theme(axis.title = element_text(size = rel(1)),\n        axis.text = element_text(size = 8))\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 | p2) / p3\npatchwork & theme_wsj() +\n  theme(plot.title =  element_text(hjust = 0.5, size = 15, face = \"bold\"))",
    "crumbs": [
      "Hands-On Exercise 2",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/hands-on_Ex02.html#reference",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.6 Reference",
    "text": "2.6 Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "Hands-On Exercise 2",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html",
    "title": "Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.1 - Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html#learning-outcome",
    "title": "Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.1 - Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html#getting-started",
    "title": "Visualising Distribution",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"../data/Exam_data.csv\")",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.1 - Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html#visualising-distribution-with-ridgeline-plot",
    "title": "Visualising Distribution",
    "section": "3 Visualising Distribution with Ridgeline Plot",
    "text": "3 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"SCORE\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  ggtitle(\"Distribution of English Score by Class\\n\") +\n  theme(plot.title = element_text(hjust=0.5),\n        axis.title.x = element_text(hjust=0.5),\n        axis.title.y = element_text(hjust=0.5))\n\n\n\n\n\n\n3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Score\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"SCORE\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  ggtitle(\"Distribution of English Score by Class\\n\") +\n  theme(plot.title = element_text(hjust=0.5),\n        axis.title.x = element_text(hjust=0.5),\n        axis.title.y = element_text(hjust=0.5))\n\n\n\n\n\n\n3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  scale_x_continuous(name = \"SCORE\")+\n  theme_ridges()+\n  ggtitle(\"Distribution of English Score by Class\\n\") +\n  theme(plot.title = element_text(hjust=0.5),\n        axis.title.x = element_text(hjust=0.5),\n        axis.title.y = element_text(hjust=0.5))\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = FALSE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  scale_x_continuous(name = \"SCORE\")+\n  theme_ridges() +\n  ggtitle(\"Distribution of English Score by Class\\n\") +\n  theme(plot.title = element_text(hjust=0.5),\n        axis.title.x = element_text(hjust=0.5),\n        axis.title.y = element_text(hjust=0.5))\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"0% to 2.5%\", \"2.5% to 97.5%\", \"97.5% to 100%\")\n  ) +\n  scale_x_continuous(name = \"SCORE\")+\n  theme_ridges() +\n  ggtitle(\"Distribution of English Score by Class\\n\") +\n  theme(plot.title = element_text(hjust=0.5),\n        axis.title.x = element_text(hjust=0.5),\n        axis.title.y = element_text(hjust=0.5))",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.1 - Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04_1/hands-on_Ex04_1.html#visualising-distribution-with-raincloud-plot",
    "title": "Visualising Distribution",
    "section": "4 Visualising Distribution with Raincloud Plot",
    "text": "4 Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  theme_ridges() +\n  ggtitle(\"Distribution of English Score by Race\\n\") +\n  labs(y = \"SCORE\") +\n  theme(plot.title = element_text(hjust=0.5),\n        axis.title.x = element_text(hjust=0.5),\n        axis.title.y = element_text(hjust=0.5))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  theme_ridges() +\n  ggtitle(\"Distribution of English Score by Race\\n\") +\n  labs(y = \"SCORE\") +\n  theme(plot.title = element_text(hjust=0.5),\n        axis.title.x = element_text(hjust=0.5),\n        axis.title.y = element_text(hjust=0.5))\n\n\n\n\n\n\n4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)+\n  theme_ridges() +\n  ggtitle(\"Distribution of English Score by Race\\n\") +\n  labs(y = \"SCORE\") +\n  theme(plot.title = element_text(hjust=0.5),\n        axis.title.x = element_text(hjust=0.5),\n        axis.title.y = element_text(hjust=0.5))\n\n\n\n\n\n\n4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()+\n  ggtitle(\"Distribution of English Score by Race\\n\") +\n  labs(y = \"SCORE\") +\n  theme(\n    plot.title = element_text(hjust=0.3),\n    axis.title.x = element_text(margin = margin(t = 12)),  \n    axis.title.y = element_text(margin = margin(r = 12))  \n  )\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.1 - Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, we learn how to model, analyse and visualise network data using R such as:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package.",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#overview",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, we learn how to model, analyse and visualise network data using R such as:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package.",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#getting-started",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "5.2 Getting Started",
    "text": "5.2 Getting Started\n\n5.2.1 Installing and launching R packages\nIn this hands-on exercise, we will be using four network data modelling and visualization packages: igraph, tidygraph, ggraph and visNetwork. We will also use tidyverse and lubridate, to handle and wrangling time data.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#the-data",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3 The Data",
    "text": "5.3 The Data\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n5.3.1 The nodes data\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n\n5.3.2 The edges data\n\nGAStech_email_edge-v2.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n5.3.3 Importing network data from files\nLet’s import GAStech_email_node.csv and GAStech_email_edges-v2.csv using read_csv() of readr package.\n\nGAStech_nodes &lt;- read_csv(\"../data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"../data/GAStech_email_edge-v2.csv\")\n\n\n\n5.3.4 Reviewing the imported data\nNext, examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date” data type.\n\n\n\n\n5.3.5 Wrangling time\nThe code chunk below will be used to format SentDate field to “Date” data type.\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\n5.3.6 Reviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n5.3.7 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\n5.3.8 Reviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4 Creating network objects using tidygraph",
    "text": "5.4 Creating network objects using tidygraph\nNow we will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\n\n5.4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n5.4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\n5.4.3 Using tbl_graph() to build tidygraph data model.\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\n\n\n\n\n\n\nNote\n\n\n\nReference guide: tbl_graph()\n\n\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n5.4.4 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n5.4.5 Reviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n5.4.6 Changing the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\nVisit the reference guide of activate() to find out more about the function.",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5 Plotting Static Network Graphs with ggraph package",
    "text": "5.5 Plotting Static Network Graphs with ggraph package\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nThere are three main aspects to a ggraph’s network graph:\n\nnodes\nedges\nlayouts\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\n5.5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph.\n🎀 Let’s explore Notice that this Basic Network Graph consist of the edge link and node points? What are they? Check them out in the tabs below\n\nBasic Network GraphEdge link onlyNode point only\n\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() \n\n\n\n\n\n\n\n\n\n\n\nggraph(GAStech_graph) +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n5.5.2 Changing the default network graph theme\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n5.5.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n🎀 PRACTICESample\n\n\nWhile I was trying to figure out why my nodes did not color, I found why it didn’t implement the color and fill that I initially set…\nIn ggplot2:\n\nShapes 1–20 are predefined symbolic point shapes.\nShapes 21–25 are “filled shapes” — they allow both.\n\nThat is why we need to define shape if we want to separately color the node points!\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(colour = 'grey50', alpha = 0.2) +     # edge color and transparrency (alpha)\n  geom_node_point(colour = 'red4', fill = 'pink',      # node border and fill color\n                  shape = 21, size = 3) +              # shape &gt;= 21 allows fill\n  theme_graph(background = 'white',\n              text_colour = 'black')\n\ng\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\n\n\nNote\n\n\n\nIn very short terms, a layout is the vertical and horizontal placement of nodes when plotting a particular graph structure. When people think of network visualizations, they think of node-edge diagrams where strongly connected nodes are attempted to be plotted in close proximity BUT layouts can be a lot of other things too — e.g. hive plots and treemaps.\n\n\n \n\n\n5.5.5 Layout\nWe use layout argument is used to define the layout to be used.\n\n🎀 PRACTICE\n\nFruchterman and Reingold LayoutStress LayoutLarge Graph LayoutKamada-Kawai layoutDistributed Recursive LayoutGraphOpt Layout\n\n\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\nfrLayout &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(colour = 'grey50', alpha = 0.2) +\n  geom_node_point(colour = 'red4', fill = 'pink',\n                  shape = 21, size = 5)\n\nfrLayout &lt;- frLayout + theme_graph() + ggtitle(\"fr layout\")\nfrLayout\n\n\n\n\n\n\n\n\n\n\n\nStressLayout &lt;- ggraph(GAStech_graph, \n            layout = \"stress\") +\n  geom_edge_link(colour = 'grey50', alpha = 0.2) +\n  geom_node_point(colour = 'red4', fill = 'pink',\n                  shape = 21, size = 5)\n\nStressLayout &lt;- StressLayout + theme_graph()  + ggtitle(\"stress layout\")\nStressLayout\n\n\n\n\n\n\n\n\n\n\n\nLgLayout &lt;- ggraph(GAStech_graph, \n            layout = \"lgl\") +\n  geom_edge_link(colour = 'grey50', alpha = 0.2) +\n  geom_node_point(colour = 'red4', fill = 'pink',\n                  shape = 21, size = 5)\n\nLgLayout &lt;- LgLayout + theme_graph() + ggtitle(\"lgl layout\")\nLgLayout\n\n\n\n\n\n\n\n\n\n\n\nKKLayout &lt;- ggraph(GAStech_graph, \n            layout = \"kk\") +\n  geom_edge_link(colour = 'grey50', alpha = 0.2) +\n  geom_node_point(colour = 'red4', fill = 'pink',\n                  shape = 21, size = 5)\n\nKKLayout &lt;- KKLayout + theme_graph() + ggtitle(\"kk layout\")\nKKLayout\n\n\n\n\n\n\n\n\n\n\n\nDrLayout &lt;- ggraph(GAStech_graph, \n            layout = \"drl\") +\n  geom_edge_link(colour = 'grey50', alpha = 0.2) +\n  geom_node_point(colour = 'red4', fill = 'pink',\n                  shape = 21, size = 5)\n\nDrLayout &lt;- DrLayout + theme_graph() + ggtitle(\"drl layout\")\nDrLayout\n\n\n\n\n\n\n\n\n\n\n\nGraphOpt &lt;- ggraph(GAStech_graph, \n            layout = \"graphopt\") +\n  geom_edge_link(colour = 'grey50', alpha = 0.2) +\n  geom_node_point(colour = 'red4', fill = 'pink',\n                  shape = 21, size = 5)\n\nGraphOpt &lt;- GraphOpt + theme_graph() + ggtitle(\"graphopt layout\")\nGraphOpt\n\n\n\n\n\n\n\n\n\n\n\n🎀 For easy comparison\n\n\n\n\n\n\n\n\n\n\n\n\n5.5.6 Modifying network nodes\nIn this section, you will colour each node by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chunks above colour and size are used.\n\n\n🎀 PRACTICE\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, fill = Title), \n                      size = 3,\n                      shape = 25)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n5.5.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#creating-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#creating-facet-graphs",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6 Creating facet graphs",
    "text": "5.6 Creating facet graphs\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n5.6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n5.6.2 Working with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n5.6.3 A framed facet graph\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n5.6.4 Working with facet_nodes()\nfacet_nodes()\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#network-metrics-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#network-metrics-analysis",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "5.7 Network Metrics Analysis",
    "text": "5.7 Network Metrics Analysis\n\n5.7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures: degree, betweenness, closeness and eigenvector.\n::: 🎀 callout-note For the principles and mathematics of these measure refer to Chapter 7: Actor Prominence of A user’s guide to network analysis in R by Luke, Douglas A (2015) to gain better understanding of theses network measures.\nAvailable for free here\nGirl math is believing that SMU library books are free 🎀🤷‍♀💅 :::\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n5.7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n5.7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\n\n\n\n\nImportant\n\n\n\nPlease be reminded that you must to install and include ggforce and concaveman packages before running the code chunk below.\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "5.8 Building Interactive Network Graph with visNetwork",
    "text": "5.8 Building Interactive Network Graph with visNetwork\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n5.8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n5.8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n5.8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\n🎀 PRACTICE\nWe customise label style in visNetwork, by setting the labelHighlightBold, font, and sometimes shape or label options for nodes. Here we will use attribute of visNodes()\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visNodes(font = list(\n    background = \"lightyellow\",  # background color\n    color = \"black\",             # font color\n    size = 20\n  ))\n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument.\n\n\n\n5.8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visNodes(font = list(\n    background = \"lightyellow\",  # background color\n    color = \"black\",             # font color\n    size = 20))\n\n\n\n\n\n\n\n5.8.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visNodes(font = list(\n    background = \"lightyellow\",  # background color\n    color = \"black\",             # font color\n    size = 20))\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument.\n\n\n5.8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visNodes(font = list(\n    background = \"lightyellow\",  # background color\n    color = \"black\",             # font color\n    size = 20))\n\n\n\n\n\nVisit Option to find out more about visOption’s argument.",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#reference",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "5.9 Reference",
    "text": "5.9 Reference\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\nVisual Analysis of Complex Networks for Business Intelligence with Gephi\nGraph Drawing\nGraph Analytics - Lesson Learned and Challenges Ahead\nLearning to Read and Interpret Network Graph Data Visualizations\nThe Visualization of Networks\nViZster: Visualizing Online Social Networks\nAdam Perer. “Finding Beautiful Insights in the Chaos of Social Network Visualizations”. In ’‘’Beautiful Visualization’’’. O’Reilly Press.\nVisual Complexity",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#all-about-r",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands-on_Ex05.html#all-about-r",
    "title": "Modelling, Visualising and Analysing Network Data with R",
    "section": "All About R",
    "text": "All About R\n\nWrangling Network Data\n\ntidygraph\ntidygraph 1.1 – A tidy hope\ntidygraph\n\n\n\nVisualisation and Analysis\nggraph\n\nggraph\nAnnouncing ggraph\n1 giraffe, 2 giraffe, GO!\nLayouts\nNodes\nEdges\ntidygraph and ggraph\n\nvizNetwork\n\nvisNetwork: Network Visualization using ‘vis.js’ Library\nIntroduction to visNetwork\nvisNetwork, an R package for interactive network visualization\n\nCircular Plot\n\ncirclize: circular visualization in R\nCircular Visualization in R",
    "crumbs": [
      "Hands-On Exercise 5",
      "5 - Modelling, Visualising and Analysing Network Data with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html",
    "title": "Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#overview",
    "title": "Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#installing-and-launching-r-packages",
    "title": "Creating Ternary Plot with R",
    "section": "Installing and launching R packages",
    "text": "Installing and launching R packages\nFor this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task.\n\npacman::p_load(plotly, ggtern, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#data-preparation",
    "title": "Creating Ternary Plot with R",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nThe data\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\nImporting Data\nTo important respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\n#Reading the data into R environment\npop_data &lt;- read_csv(\"../data/respopagsex2000to2018_tidy.csv\") \n\n\n\nPreparing the Data\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#plotting-ternary-diagram-with-r",
    "title": "Creating Ternary Plot with R",
    "section": "Plotting Ternary Diagram with R",
    "text": "Plotting Ternary Diagram with R\n\n4.1 Plotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\nPlotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#references",
    "title": "Creating Ternary Plot with R",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#readings",
    "href": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#readings",
    "title": "Creating Ternary Plot with R",
    "section": "Readings",
    "text": "Readings\n\nCore Readings\nMultivariate Methods\n\nAn Introduction to Visual Multivariate Analysis\nCorrgrams: Exploratory Displays for Correlation Matrices\nTernary Plot\nMultivariate Data Glyphs\nParallel Coordinates\nWikipedia: Heatmap\n\nTreemaps\n\nShneiderman, Ben (2008) Treemaps for space-constrained visualization of hierarchies\nExtending the Utility of Treemaps with Flexible Hierarchy\n\n\n\nOptional Readings\nMultivariate Methods\n\nThe scatter-plot matrix: a great tool\nA Graphical Display of Large Correlation Matrices\nTernary Diagram\nReading a Ternary Diagram\nMultidimensional Detective\nParallel Coordinates\nMultivariate Analysis Using Parallel Coordinates\nGhosts on the Radar — Why Radar Charts Are Easily Misread\nKeep Radar Graphs Below the Radar - Far Below\nA Critique of Radar Charts\nRadar: More Evil Than Pie\n\nTreemaps\n\nTreemaps\nDiscovering Business Intelligence Using Treemap Visualization\n10 Lessons in Treemap Design\nBederson, Benjamin B.; Shneiderman, Ben; Wattenberg, Martin (2002). Ordered and quantum treemaps: Making effective use of 2D space to display hierarchies. ACM Transactions on Graphics. 21 (4): 833.\nBruls, Mark; Huizing, Kees; van Wijk, Jarke J. (2000). Squarified treemaps. In de Leeuw, W.; van Liere, R. Data Visualization 2000: Proc. Joint Eurographics and IEEE TCVG Symp. on Visualization]\nUS Economic Census Treemap\nTreeCovery: Coordinated dual treemap visualization for exploring the Recovery Act\nJuice’s Stimulus Bill Explorer\nFundexplorer\nMap of the Market\nThe HIVE Group\nTruck Sales Slip, Tripping Up Chrysler\nNewsmap\nObama’s 2011 Budget Proposal: How It’s Spent"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09_1/hands-on_Ex09_1.html#r-packages",
    "title": "Creating Ternary Plot with R",
    "section": "R Packages",
    "text": "R Packages\n\nCorrelation Matrix\n\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\n\n\n\nHeatmap\nStatic heatmap\n\nheatmap() of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nInteractive Heatmap\n\nheatmaply: Make Interactive Cluster Heat Maps Using ‘plotly’\nd3heatmap: Make Interactive Heat Maps Using ‘htmlwidgets’ and ’D3.js.\niheatmapr makes complex, interactive heatmaps. Detail information are available at here.\n\n\n\nTreemaps\n\nTreemap package.\n\nCreating a Treemap in R\ntreemap: mapping to color palettes\nSimple Steps to Create Treemap in R\n\ntreemapify: Draw Treemaps in ‘ggplot2’\n\nIntroduction to treemapify\nInteractive visualization with R-Shiny versus with Tableau: Treemaps\n\n\n\n\nSunburst Diagram\n\nsunburstR\nSunburst 2.0.0\nCreate Basic Sunburst Graphs with ggplot2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html",
    "title": "Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.4 - Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#overview",
    "title": "Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.4 - Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#installing-and-launching-r-packages",
    "title": "Funnel Plots for Fair Comparisons",
    "section": "2 Installing and Launching R Packages",
    "text": "2 Installing and Launching R Packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.4 - Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#importing-data",
    "title": "Funnel Plots for Fair Comparisons",
    "section": "3 Importing Data",
    "text": "3 Importing Data\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"../data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.4 - Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#funnelplotr-methods",
    "title": "Funnel Plots for Fair Comparisons",
    "section": "4 FunnelPlotR methods",
    "text": "4 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfp &lt;- funnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`,\n  title = \"Cumulative COVID-19 Fatality Rate by\\nCumulative Total Number of COVID-19 Positive Cases\", \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nplot(fp)+theme(legend.position = \"right\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfp2 &lt;- funnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  x_range = c(0, 6500),  #&lt;&lt;\n  y_range = c(0, 0.05),   #&lt;&lt;\n  title = \"Cumulative COVID-19 Fatality Rate by\\nCumulative Total Number of COVID-19 Positive Cases\", \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nplot(fp2)+theme(legend.position = \"right\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfp3 &lt;- funnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by\\nCumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nplot(fp3)+theme(legend.position = \"right\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.4 - Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Funnel Plots for Fair Comparisons",
    "section": "5 Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "5 Funnel Plot for Fair Visual Comparison: ggplot2 methods\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n5.3 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n5.4 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \n\ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n5.5 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(#label=`Sub-district`,\n                    text = paste('Sub-district:', `Sub-district`, \n                              '&lt;br&gt;Positive Case:', Positive,\n                              '&lt;br&gt;Rate:',round(rate,4)*100,'%')), \n             alpha=0.6,\n             colour = \"skyblue\",\n             stroke = 1,\n             size = 2) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95\n                #text = paste(\"Cases:\", number.seq, \n             #\"&lt;br&gt;95% Lower Limit:\", paste0(round(number.ll95 * 100, 4), \"%\"))\n             ),\n            size = 0.4, \n            colour = \"purple\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95\n                #text = paste(\"Cases:\", number.seq, \n                              #\"&lt;br&gt;95% Upper Limit:\", round(number.ul95, 4)*100,\"%\")\n                ), \n            size = 0.4, \n            colour = \"purple\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999,\n                #text = paste(\"Cases:\", number.seq, \n                              #\"&lt;br&gt;99.9% Lower Limit:\", round(number.ll999, 4)*100,\"%\")\n                ), \n            size = 0.4, \n            colour = \"green4\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999,\n                #text = paste(\"Cases:\", number.seq, \n                              #\"&lt;br&gt;99.9% Upper Limit:\", round(number.ul999, 4)*100,\"%\")\n                ), \n            size = 0.4, \n            colour = \"green4\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean,\n                #text = paste(\"Mean:\", fit.mean)\n                ), \n             size = 0.4, \n             colour = \"green4\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"skyblue\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"skyblue\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12, face = \"bold\", hjust = 0.5),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"skyblue\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n5.6 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"text\"))\n#fp_ggplotly #dont call here\n\n# Add custom tooltips for lines\npfp_ggplotly &lt;- fp_ggplotly %&gt;%\n  layout(hovermode = \"closest\")\n\n# Add custom hover text for lines\npfp_ggplotly$x$data[[2]]$text &lt;- paste(\"Cases:\", dfCI$number.seq, \n                                       \"&lt;br&gt;95% Lower Limit:\", round(dfCI$number.ll95 * 100, 4), \"%\")\npfp_ggplotly$x$data[[3]]$text &lt;- paste(\"Cases:\", dfCI$number.seq, \n                                       \"&lt;br&gt;95% Upper Limit:\", round(dfCI$number.ul95 * 100, 4), \"%\")\npfp_ggplotly$x$data[[4]]$text &lt;- paste(\"Cases:\", dfCI$number.seq, \n                                       \"&lt;br&gt;99.9% Lower Limit:\", round(dfCI$number.ll999 * 100, 4), \"%\")\npfp_ggplotly$x$data[[5]]$text &lt;- paste(\"Cases:\", dfCI$number.seq, \n                                       \"&lt;br&gt;99.9% Upper Limit:\", round(dfCI$number.ul999 * 100, 4), \"%\")\npfp_ggplotly$x$data[[6]]$text &lt;- paste(\"Mean:\", dfCI$fit.mean)\n\npfp_ggplotly",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.4 - Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04_4/hands-on_Ex04_4.html#references",
    "title": "Funnel Plots for Fair Comparisons",
    "section": "6 References",
    "text": "6 References\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package.",
    "crumbs": [
      "Hands-On Exercise 4",
      "4.4 - Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, we learn the basic principles and essential components of ggplot2 through hands-on experience to plot statistical graphics based on the principle of Layered Grammar of Graphics. We will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#learning-outcome",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, we learn the basic principles and essential components of ggplot2 through hands-on experience to plot statistical graphics based on the principle of Layered Grammar of Graphics. We will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#getting-started",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Getting started",
    "text": "1.2 Getting started\n\n1.2.1 Installing and loading the required libraries\nBefore we get started, it is important for us to ensure that the required R packages have been installed.\n\n\n\n\n\n\nNote\n\n\n\nInstall pacman package by typing below in the Console:\n\n\n\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\ninstall.packages(\"pacman\")\n\n\nThe downloaded binary packages are in\n    /var/folders/4r/w93xvtdd1jnb6dwstljj2_9w0000gn/T//Rtmp5ALkDv/downloaded_packages\n\n\nUse the package by typing:\n\npacman::p_load(tidyverse)\n\n\n\n1.2.2 Importing data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#introducing-ggplot",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Introducing ggplot",
    "text": "1.3 Introducing ggplot\nggplot is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication. For more detail, visit ggplot2 link.\n\n\n\n\n\n\nCheatsheet for ggplot2 (here)\n\n\n\n\n\n\n\n\n\n\n\n1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R vs ggplot plot when plotting a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n🎀 PRACTICE\nPractice plotting the different charts for English and Science.\n\n\nEnglish\n\nG graphicshistogramboxplot by Genderboxplot by Class\n\n\n\nhist(exam_data$ENGLISH)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"skyblue\") +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = GENDER,\n           y = ENGLISH)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = CLASS,\n           y = ENGLISH)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nScience\n\nG graphicshistogramboxplot by Genderboxplot by Class\n\n\n\nhist(exam_data$SCIENCE)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = SCIENCE)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"skyblue\") +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = GENDER,\n           y = SCIENCE)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = CLASS,\n           y = SCIENCE)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#grammar-of-graphics",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammar of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR colors\n\n\n\nThese are the default color Color naming for R, alternatively you can use Hex Code.",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30. Continue reading to learn how to customise this bin.\n\n\n\n\n1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n🎀 PRACTICE\n\n\n\n\n\n\nNote\n\n\n\nBy default, the underlying computation of geom_histogram through stat_bin uses 30 bins, which is not always a good default. You can set the number of bins with bins argument or modifying the width (range) of each bin with binwidth argument.\nMore info here\n\n\n\nbinbinwidth\n\n\nSet the number of bins (e.g automatically divde into 20 bins)\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 color=\"pink4\",\n                 fill=\"pink3\")\n\n\n\n\n\n\n\n\n\n\nModifying the width(range) of each bin (e.g bin to 0-20, 20-40, 40-60, 60-80 etc)\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(binwidth = 20,\n                 color=\"pink4\",\n                 fill=\"pink3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n🎀 PRACTICE\n\nggplot(data = exam_data, \n       aes(x = SCIENCE, fill = GENDER)) +\n  geom_histogram(bins = 20, color = \"grey30\") +\n  scale_fill_manual(values = c(\"Female\" = \"plum2\", \"Male\" = \"royalblue1\"))\n\n\n\n\n\n\n\n\n\n\n\n1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8 Essential Grammatical Elements in ggplot2: stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\ngeom_smooth(method = \"loess\")\n\n\nThe default smoothing method can be overridden as shown below.\n\nlmloess (default)\n\n\n‘lm’ draws a straight line\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n‘loess’ draws a very smooth curve\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=loess, #or if you input NULL or if you don't define 'method' at all, it will apply default method\n              linewidth=0.5)",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n🎀 PRACTICE\n\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size=0.8, colour=\"pink4\") +\n  facet_wrap(~ CLASS)",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out.)\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar(fill=\"pink4\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n1.10.2 Changing the y- and x-axis range\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11 Essential Grammatical Elements in ggplot2: themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n1.11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/hands-on_Ex01.html#reference",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale",
    "crumbs": [
      "Hands-On Exercise 1",
      "1 - A Layered Grammar of Graphics"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html",
    "href": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html",
    "title": "Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#overview",
    "title": "Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#installing-and-launching-r-packages",
    "title": "Treemap Visualisation with R",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nBefore we get started, you are required to check if treemap and tidyverse pacakges have been installed in you R.\n\npacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#data-wrangling",
    "title": "Treemap Visualisation with R",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nIn this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\nImporting the data set\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\nrealis2018 &lt;- read_csv(\"../data/realis2018.csv\")\n\nThe output tibble data.frame is called realis2018.\n\n\nData Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n\n\n\n\nRecommendation\n\n\n\nStudents who are new to dplyr methods should consult Introduction to dplyr before moving on to the next section.\n\n\n\n\nGrouped summaries without the Pipe\nThe code chank below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\nNote\n\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n\nGrouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\n\n\n\n\nRecommendation\n\n\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#designing-treemap-with-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#designing-treemap-with-treemap-package",
    "title": "Treemap Visualisation with R",
    "section": "Designing Treemap with treemap Package",
    "text": "Designing Treemap with treemap Package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\nDesigning a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\nUsing the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\nWarning:\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\nWorking with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThinking to learn from the conde chunk above.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\n\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\nColours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\nThe “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\nThe “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nTreemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\nWorking with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nUsing sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#designing-treemap-using-treemapify-package",
    "title": "Treemap Visualisation with R",
    "section": "Designing Treemap using treemapify Package",
    "text": "Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\nDesigning a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\nDefining hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex09_5/hands-on_Ex09_5.html#designing-interactive-treemap-using-d3treer",
    "title": "Treemap Visualisation with R",
    "section": "Designing Interactive Treemap using d3treeR",
    "text": "Designing Interactive Treemap using d3treeR\n\nInstalling d3treeR package\nThis slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\n\ninstall.packages(\"devtools\")\n\n\nNext, you will load the devtools library and install the package found in github by using the codes below.\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nNow you are ready to launch d3treeR package\n\n\nlibrary(d3treeR)\n\n\n\nDesigning An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html",
    "href": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#overview",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#installing-and-launching-r-packages",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nBefore you get started, you are required to open a new Quarto document. Keep the default html as the authoring format.\nNext, you will use the code chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#importing-and-preparing-the-data-set",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Importing and Preparing The Data Set",
    "text": "Importing and Preparing The Data Set\nIn this hands-on exercise, the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\nImporting the data set\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"../data/WHData-2018.csv\")\n\nThe output tibbled data frame is called wh.\n\n\nPreparing the data\nNext, we need to change the rows by country name instead of row number by using the code chunk below\n\nrow.names(wh) &lt;- wh$Country\n\nNotice that the row number has been replaced into the country name.\n\n\nTransforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#static-heatmap",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Static Heatmap",
    "text": "Static Heatmap\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nIn this section, you will learn how to plot static heatmaps by using heatmap() of R Stats package.\n\nheatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\nNote:\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#creating-interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex09_3/hands-on_Ex09_3.html#creating-interactive-heatmap",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Creating Interactive Heatmap",
    "text": "Creating Interactive Heatmap\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nBefore we get started, you should review the Introduction to Heatmaply to have an overall understanding of the features and functions of Heatmaply package. You are also required to have the user manualof the package handy with you for reference purposes.\nIn this section, you will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\nWorking with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\nData trasformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\nScaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\n\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nNormalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nPercentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nClustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\nManual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nStatistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\nSeriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\nWorking with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\nThe finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "This website serves as a digital portfolio for my coursework in the ISSS608 Visual Analytics and Applications module. Whether you’re a fellow student, instructor, potential recruiter, or simply curious about data visualization with R, I hope you’ll find this space insightful and engaging.\nHere, you will find a collection of my work structured into three main sections:\n\nHands-on Exercises – Guided tasks completed with practical tutorials that explore key concepts and techniques in visual analytics.\nIn-class Exercises – Guided tasks completed during class sessions.\nTake-home Exercises – More in-depth assignments that demonstrate my understanding and application of visual storytelling and data design principles.\n\nAll visualizations are developed using R and RStudio, marking my first experience with the R language—an exciting learning journey and a new set of tools for exploring and communicating data stories.\n\n\n\n\n\nIf you’d like to know more about my background, experience, and qualifications, feel free to visit the About Me page.\nCheers!"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_phase2.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_phase2.html",
    "title": "Take-home Exercise 1 Part 2",
    "section": "",
    "text": "I will be reviewing this pie chart from LIAW YING TING CELIN\nFirst we load all the necessary packages and data preparation that she has done.\n\nDataCode\n\n\n\n\n# A tibble: 6 × 8\n  Planning_Area Subzone          Age   Sex   Population  Time Age_numeric Region\n  &lt;chr&gt;         &lt;chr&gt;            &lt;fct&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt; \n1 Ang Mo Kio    Ang Mo Kio Town… 0     Males         10  2024           0 North…\n2 Ang Mo Kio    Ang Mo Kio Town… 0     Fema…         10  2024           0 North…\n3 Ang Mo Kio    Ang Mo Kio Town… 1     Males         10  2024           1 North…\n4 Ang Mo Kio    Ang Mo Kio Town… 1     Fema…         10  2024           1 North…\n5 Ang Mo Kio    Ang Mo Kio Town… 2     Males         10  2024           2 North…\n6 Ang Mo Kio    Ang Mo Kio Town… 2     Fema…         10  2024           2 North…\n\n\n\n\n\npacman::p_load(tidyverse, ggrepel, \n               ggthemes,  hrbrthemes,\n               patchwork, dplyr) \n\nresident_data &lt;- read_csv(\"data/respopagesex2024.csv\")\n\nresident_data_clean &lt;- resident_data %&gt;%\n  rename(\n    Planning_Area = PA,\n    Subzone = SZ,\n    Population = Pop\n  ) %&gt;%\n  # Convert Age to \"90+\" if it's \"90_and_Over\"\n  mutate(\n    Age = ifelse(Age == \"90_and_Over\", \"90\", Age),\n    Population = as.numeric(Population),\n    Age = factor(Age, levels = as.character(0:90)),\n    Age_numeric = as.numeric(as.character(Age))  \n  )\n\n# 1. Step 1\nregion_map &lt;- list(\n  North = c(\n    \"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\",\n    \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\"\n  ),\n  `North-East` = c(\n    \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \n    \"Serangoon\", \"Seletar\"\n  ),\n  East = c(\n    \"Bedok\", \"Changi\", \"Changi Bay\", \n    \"Pasir Ris\", \"Paya Lebar\", \"Tampines\"\n  ),\n  West = c(\n    \"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\",\n    \"Clementi\", \"Jurong East\", \"Jurong West\", \"Pioneer\", \n    \"Tengah\", \"Tuas\", \"Western Water Catchment\"\n  ),\n  Central = c(\n    \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Central Area\",\n    \"Downtown Core\", \"Marina East\", \"Marina South\", \"Museum\",\n    \"Newton\", \"Novena\", \"Orchard\", \"Outram\", \"River Valley\",\n    \"Rochor\", \"Singapore River\", \"Straits View\", \"Tanglin\"\n  )\n)\n\n# Step 2\nresident_regioned &lt;- resident_data_clean %&gt;%\n  mutate(\n    Region = case_when(\n      Planning_Area %in% region_map$North        ~ \"North\",\n      Planning_Area %in% region_map$`North-East` ~ \"North-East\",\n      Planning_Area %in% region_map$East         ~ \"East\",\n      Planning_Area %in% region_map$West         ~ \"West\",\n      Planning_Area %in% region_map$Central      ~ \"Central\",\n      TRUE                                       ~ NA_character_\n    )\n  ) %&gt;%\n  filter(!is.na(Region))\n\nhead(resident_regioned)",
    "crumbs": [
      "Take-Home Exercise 1",
      "1.2 - Take Home Exercise 1 Part 2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_phase2.html#three-good-design-principles-why-is-it-beautiful",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_phase2.html#three-good-design-principles-why-is-it-beautiful",
    "title": "Take-home Exercise 1 Part 2",
    "section": "3.1 Three good design principles Why is it “beautiful”?",
    "text": "3.1 Three good design principles Why is it “beautiful”?\n\nColor coding is visually appealing.\nLegend is complete and match the segment. It’s also located where it’s easy to find.\nClean and clear font choice with percentage labels are neatly placed inside the slices.",
    "crumbs": [
      "Take-Home Exercise 1",
      "1.2 - Take Home Exercise 1 Part 2"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_phase2.html#three-areas-for-further-improvement-why-is-it-confusing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_phase2.html#three-areas-for-further-improvement-why-is-it-confusing",
    "title": "Take-home Exercise 1 Part 2",
    "section": "3.2 Three areas for further improvement Why is it “confusing”?",
    "text": "3.2 Three areas for further improvement Why is it “confusing”?\n\nThere’s no clear visual grouping of the same region. For example, “Central.Males” and “Central.Females” are separated visually, making it hard to compare within regions.\n\nIt also blends region and gender into a single variable without grouping, which prevents high-level insights (e.g., total by gender or region).\n\nPie Chart might not be ideal for this kind of “demographic” data with so many regions.\n\nIf you still want to stick with a pie chart, you can create a sunburst plot to show the grouping. In this case, we can show the splits between Males and Females for each region. Which is what I will implement in the makeover version.\n\nThough the legend is complete, it’s not very clear and aesthethic with the . in the naming.",
    "crumbs": [
      "Take-Home Exercise 1",
      "1.2 - Take Home Exercise 1 Part 2"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "Superstore Sales vs Profit by States Quadrant",
    "section": "",
    "text": "View on",
    "crumbs": [
      "In-Class Excercise",
      "3 - Superstore Sales vs Profit by States Quadrant"
    ]
  }
]