{
  "hash": "deb69d2fe3c3614d9ccb3d11b9f4617f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Preparation for VAST 2025 Mini Challenge 1\"\nauthor: \"Vanessa Riadi\"\ndate: \"May 17, 2025\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    toc: true\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n# [1]{style=\"color:#d496d4\"} Loading Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)\n```\n:::\n\n\n\n# [2]{style=\"color:#d496d4\"} Importing Knowledge Graph Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkg <- fromJSON(\"../data/MC1_graph.json\")\n```\n:::\n\n\n\n## [2.1]{style=\"color:#d496d4\"} Inspect Structure\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(kg,max.level=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n\n\n## [2.2]{style=\"color:#d496d4\"} Extract and Inspect\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <- as_tibble(kg$nodes)\nedges_tbl <- as_tibble(kg$links)\n```\n:::\n\n\n\n## [2.3]{style=\"color:#d496d4\"} Initial EDA\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n       geom_bar()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n       geom_bar()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n# [3]{style=\"color:#d496d4\"} Creating Knowledge Graph\n\n## [3.1]{style=\"color:#d496d4\"} Step 1 : Mapping from Node ID to Row Index\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)\n                  )\n                 )\n```\n:::\n\n\n\nThis ensures each id from your node list is mapped to the correct row number\n\n## [3.2]{style=\"color:#d496d4\"} Step 2 : Map Source and Target IDs to row indicises\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>% \n  left_join(id_map, by = c(\"source\" = \"id\"))%>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\"))%>%\n  rename(to = index)\n```\n:::\n\n\n\n## [3.3]{style=\"color:#d496d4\"} Step 3 : Filter out any unmatched (invalid) edges\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl<- edges_tbl %>%\n  filter(!is.na(from), !is.na(to))\n```\n:::\n\n\n\n## [3.4]{style=\"color:#d496d4\"} Step 4 : Creating the Graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n```\n:::\n\n\n\n## [3.5]{style=\"color:#d496d4\"} Visualising the knowledge graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n## [3.6]{style=\"color:#d496d4\"} Visualising the Whole Graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph,layout = \"fr\")+\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n# [4]{style=\"color:#d496d4\"} Visualising The Sub Graph\n\n## [4.1]{style=\"color:#d496d4\"} Step 1 : Filter Edges to only \"MemberOf\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph %>% \n  activate(edges) %>%\n  filter(`Edge Type` == \"MemberOf\")\n```\n:::\n\n\n\n## [4.2]{style=\"color:#d496d4\"} Step 2 : Extract only connected nodes (i.e., used in these edges)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_node_indices <- graph_memberof %>%\n  activate(edges) %>%\n  as_tibble() %>% \n  select(from, to) %>%\n  unlist() %>%\n  unique()\n```\n:::\n\n\n\n## [4.3]{style=\"color:#d496d4\"} Step 3 : Keep only those nodes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph_memberof %>%\n  activate(nodes) %>% \n  mutate(row_id = row_number()) %>% \n  filter(row_id %in% used_node_indices) %>% \n  select(-row_id)\n```\n:::\n\n\n\n## [4.4]{style=\"color:#d496d4\"} Plot the sub-graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 color = \"gray\")+\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}