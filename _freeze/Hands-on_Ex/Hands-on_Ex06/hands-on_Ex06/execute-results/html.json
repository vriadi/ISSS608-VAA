{
  "hash": "359b926032bfb48a3e7f80ce49095d6c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualising and Analysing Time-oriented Data\"\nauthor: \"Vanessa Riadi\"\ndate: \"May 19, 2025\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    toc: true\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## [5.1]{style=\"color:#d496d4\"} Learning Outcome\n\nWe will learn how to create the followings using R visualisation in this hands-on exercise:\n\n-   plotting a calender heatmap by using ggplot2 functions,\n\n-   plotting a cycle plot by using ggplot2 function,\n\n-   plotting a slopegraph\n\n-   plotting a horizon chart\n\n## [5.2]{style=\"color:#d496d4\"} Getting Started\n\n### [5.2.1]{style=\"color:#d496d4\"} Installing and launching R packages\n\nWe will install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n```\n:::\n\n\n\n## [5.3]{style=\"color:#d496d4\"} Plotting Calendar Heatmap\n\nIn this section, you will learn how to:\n\n-   plot a calender heatmap by using ggplot2 functions and extension,\n-   write function using R programming,\n-   derive specific date and time related field by using base R and lubridate packages\n-   perform data preparation task by using tidyr and dplyr packages.\n\nExample of a calender heatmap programmatically by using ggplot2 package:\n\n![](img/image01.png)\n\n### [5.3.1]{style=\"color:#d496d4\"} The Data\n\nFor the purpose of this hands-on exercise, *eventlog.csv* file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\nFirst we import *eventlog.csv* file into R environment and called the data frame as *attacks*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"../data/eventlog.csv\")\n```\n:::\n\n\n\n### [5.3.2]{style=\"color:#d496d4\"} Examining the data structure\n\nIt is always a good practice to examine the imported data frame before further analysis is performed.\n\nFor example, *kable()* can be used to review the structure of the imported data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\n\nThere are three columns, namely *timestamp*, *source_country* and *tz*.\n\n-   *timestamp* field stores date-time values in POSIXct format.\n-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.\\\n-   *tz* field stores time zone of the source IP address.\n\n### [5.3.3]{style=\"color:#d496d4\"} Data Preparation\n\nStep 1: Deriving *weekday* and *hour of day* fields\n\nBefore we can plot the calender heatmap, two new fields namely *weekday* and *hour* need to be derived. In this step, we will write a function to perform the task.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   weekday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n```\n:::\n\n\n\n::: callout-note\n-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and\n-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.\n:::\n\n::: callout-tip\n# Cheatsheet for lubridate [here](https://rawgit.com/rstudio/cheatsheets/main/lubridate.pdf)\n\n![](lubridate.pdf){fig-align=\"center\" width=\"700\" height=\"350\"}\n:::\n\nStep 2: Deriving the attacks tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweekday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(weekday = factor(\n    weekday, levels = weekday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n```\n:::\n\n\n\n::: callout-note\nBeside extracting the necessary data into *attacks* data frame, `mutate()` of **dplyr** package is used to convert *weekday* and *hour* fields into **factor** so they'll be ordered when plotting\n:::\n\nTable below shows the tidy tibble table after processing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |weekday  |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n\n### [5.3.4]{style=\"color:#d496d4\"} Building the Calendar Heatmaps\n\n::: callout-note\nUsing `size` aesthetic for lines was deprecated in ggplot2 3.4.0. So we will use use `linewidth` instead.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks %>% \n  count(weekday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           weekday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          #size = 0.1) +  USE LINEWIDTH INSTEAD!!!\n          linewidth = 0.1) +\ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](hands-on_Ex06_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\n# Things to learn from the code chunk\n\n-   a tibble data table called *grouped* is derived by aggregating the attack by *weekday* and *hour* fields.\n-   a new field called *n* is derived by using `group_by()` and `count()` functions.\n-   `na.omit()` is used to exclude missing value.\n-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.\n-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).\n:::\n\nThen we can simply group the count by hour and weekday and plot it, since we know that we have values for every combination there's no need to further preprocess the data.\n\n### [5.3.5]{style=\"color:#d496d4\"} Building Multiple Calendar Heatmaps\n\n**Challenge:** Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n**EXAMPLE:** ![](img/image02.png)\n\n### [5.3.6]{style=\"color:#d496d4\"} Plotting Multiple Calendar Heatmaps\n\nStep 1: Deriving attack by country object\n\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\n-   count the number of attacks by country,\n-   calculate the percent of attackes by country, and\n-   save the results in a tibble data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\n\nStep 2: Preparing the tidy data frame\n\nIn this step, you are required to extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, weekday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n\n### [5.3.7]{style=\"color:#d496d4\"} Plotting Multiple Calendar Heatmaps\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top4_attacks, \n       aes(hour, \n           weekday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](hands-on_Ex06_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n\n\n## [5.4]{style=\"color:#d496d4\"} Plotting Cycle Plot\n\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n![](img/image03.png)\n\n### [5.4.1]{style=\"color:#d496d4\"} Step 1: Data Import\n\nFor the purpose of this hands-on exercise, *arrivals_by_air.xlsx* will be used.\n\nThe code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and save it as a tibble data frame called *air*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"../data/arrivals_by_air.xlsx\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Month-Year | Republic of South Africa| Canada|   USA| Bangladesh| Brunei| China| Hong Kong SAR (China)| India| Indonesia| Japan| South Korea| Kuwait| Malaysia| Myanmar| Pakistan| Philippines| Saudi Arabia| Sri Lanka| Taiwan| Thailand| United Arab Emirates| Vietnam| Belgium & Luxembourg|  CIS| Finland| France| Germany| Ireland| Italy| Netherlands| Spain| Switzerland| United Kingdom| Australia| New Zealand|\n|:----------|------------------------:|------:|-----:|----------:|------:|-----:|---------------------:|-----:|---------:|-----:|-----------:|------:|--------:|-------:|--------:|-----------:|------------:|---------:|------:|--------:|--------------------:|-------:|--------------------:|----:|-------:|------:|-------:|-------:|-----:|-----------:|-----:|-----------:|--------------:|---------:|-----------:|\n|2000-01-01 |                     3291|   5545| 25906|       2883|   3749| 33895|                 13692| 19235|     65151| 59288|       21457|    507|    27472|    1177|     2150|        8404|         1312|      3922|  15766|    12048|                 1318|    1527|                 1434| 2703|    1634|   4752|   12739|    1292|  3544|        4962|   925|        3731|          28986|     34616|        5034|\n|2000-02-01 |                     2357|   6120| 28262|       2469|   3236| 34344|                 19870| 18975|     37105| 58188|       19634|    199|    29084|    1161|     2496|        9128|          623|      3988|  24861|    12745|                  899|    2269|                 1596| 1182|    1297|   6391|   13093|    1200|  2897|        5054|   747|        3980|          35148|     26030|        3938|\n|2000-03-01 |                     4036|   6255| 30439|       2904|   3342| 27053|                 17086| 21049|     44205| 74426|       20719|    386|    30504|    1355|     2429|       11691|         1578|      4259|  18767|    16971|                 1474|    2034|                 1548| 1088|    1220|   5528|   13645|    1368|  2717|        4950|   935|        3576|          36117|     31119|        4668|\n|2000-04-01 |                     4241|   4521| 25378|       2843|   5117| 30464|                 22346| 26160|     45480| 49985|       17489|    221|    34478|    1593|     2711|       14141|          705|      6579|  22735|    20397|                 1284|    2420|                 1592| 1012|    1208|   5544|   13366|    1345|  2512|        4149|   941|        3850|          33792|     34824|        6890|\n|2000-05-01 |                     2841|   3914| 26163|       2793|   4152| 30775|                 16357| 35869|     38350| 48937|       19398|    164|    34795|    1397|     2594|       13305|          679|      4625|  18399|    15769|                 1042|    1833|                 1167|  660|     743|   4225|   10878|    1067|  2205|        3643|   764|        3025|          23377|     33139|        7006|\n|2000-06-01 |                     2776|   3487| 28179|       3146|   5018| 26720|                 18133| 31314|     47982| 53798|       17522|    440|    34660|    1715|     2924|       10555|         2749|      4740|  21042|    17217|                 1545|    2480|                 1170|  712|     982|   4047|    9054|    1363|  2196|        3544|   855|        2580|          21769|     35731|        7634|\n\n\n:::\n:::\n\n\n\n### [5.4.2]{style=\"color:#d496d4\"} Step 2: Deriving month and year fields\n\nNext, two new fields called *month* and *year* are derived from *Month-Year* field.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n\n### [5.4.3]{style=\"color:#d496d4\"} Step 4: Extracting the target country\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| Vietnam|month | year|\n|-------:|:-----|----:|\n|   15781|Jan   | 2010|\n|   16335|Feb   | 2010|\n|   18061|Mar   | 2010|\n|   22154|Apr   | 2010|\n|   21461|May   | 2010|\n|   28146|Jun   | 2010|\n\n\n:::\n:::\n\n\n\n### [5.4.4]{style=\"color:#d496d4\"} Step 5: Computing year average arrivals by month\n\nThe code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|month | avgvalue|\n|:-----|--------:|\n|Jan   |  24113.4|\n|Feb   |  26693.4|\n|Mar   |  27200.1|\n|Apr   |  30390.8|\n|May   |  31452.9|\n|Jun   |  41325.3|\n\n\n:::\n:::\n\n\n\n### [5.4.5]{style=\"color:#d496d4\"} Step 6: Plotting the cycle plot\n\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\n::: panel-tabset\n\n## 🎀 [PRACTICE]{style=\"color:#d496d4\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             linewidth=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_grey(base_family = \"Helvetica\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) \n```\n\n::: {.cell-output-display}\n![](hands-on_Ex06_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Plot & Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             linewidth=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n```\n\n::: {.cell-output-display}\n![](hands-on_Ex06_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n## [5.5]{style=\"color:#d496d4\"} Plotting Slopegraph\n\nIn this section you will learn how to plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.\n\nBefore getting start, make sure that **CGPfunctions** has been installed and loaded onto R environment. Then, refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) to learn more about the function. Lastly, read more about `newggslopegraph()` and its arguments by referring to this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).\n\n### [5.5.1]{style=\"color:#d496d4\"} Step 1: Data Import\n\nImport the rice data set into R environment by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"../data/rice.csv\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Country | Year| Yield| Production|\n|:-------|----:|-----:|----------:|\n|China   | 1961| 20787|   56217601|\n|China   | 1962| 23700|   65675288|\n|China   | 1963| 26833|   76439280|\n|China   | 1964| 28289|   85853780|\n|China   | 1965| 29667|   90705630|\n|China   | 1966| 31445|   98403990|\n\n\n:::\n:::\n\n\n\n### [5.5.2]{style=\"color:#d496d4\"} Step 2: Plotting the slopegraph\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\n:::: panel-tabset\n## 🎀 [PRACTICE]{style=\"color:#d496d4\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Vanessa Riadi\")\n```\n\n::: {.cell-output-display}\n![](hands-on_Ex06_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Given Code & Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n```\n\n::: {.cell-output-display}\n![](hands-on_Ex06_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\n# Thing to learn from the code chunk above\n\nFor effective data visualisation design, `factor()` is used convert the value type of *Year* field from numeric to factor.\n:::\n::::\n",
    "supporting": [
      "hands-on_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}